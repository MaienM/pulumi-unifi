# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DevicePortOverrideArgs',
    'SettingMgmtSshKeyArgs',
    'WlanScheduleArgs',
]

@pulumi.input_type
class DevicePortOverrideArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None,
                 port_profile_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] number: Switch port number.
        :param pulumi.Input[str] name: Human-readable name of the port.
        :param pulumi.Input[str] port_profile_id: ID of the Port Profile used on this port.
        """
        pulumi.set(__self__, "number", number)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_profile_id is not None:
            pulumi.set(__self__, "port_profile_id", port_profile_id)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        """
        Switch port number.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable name of the port.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="portProfileId")
    def port_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Port Profile used on this port.
        """
        return pulumi.get(self, "port_profile_id")

    @port_profile_id.setter
    def port_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_profile_id", value)


@pulumi.input_type
class SettingMgmtSshKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of SSH key.
        :param pulumi.Input[str] type: Type of SSH key, e.g. ssh-rsa.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] key: Public SSH key.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of SSH key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of SSH key, e.g. ssh-rsa.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Public SSH key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class WlanScheduleArgs:
    def __init__(__self__, *,
                 block_end: pulumi.Input[str],
                 block_start: pulumi.Input[str],
                 day_of_week: pulumi.Input[str]):
        """
        :param pulumi.Input[str] block_end: Time of day to end the block.
        :param pulumi.Input[str] block_start: Time of day to start the block.
        :param pulumi.Input[str] day_of_week: Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.
        """
        pulumi.set(__self__, "block_end", block_end)
        pulumi.set(__self__, "block_start", block_start)
        pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="blockEnd")
    def block_end(self) -> pulumi.Input[str]:
        """
        Time of day to end the block.
        """
        return pulumi.get(self, "block_end")

    @block_end.setter
    def block_end(self, value: pulumi.Input[str]):
        pulumi.set(self, "block_end", value)

    @property
    @pulumi.getter(name="blockStart")
    def block_start(self) -> pulumi.Input[str]:
        """
        Time of day to start the block.
        """
        return pulumi.get(self, "block_start")

    @block_start.setter
    def block_start(self, value: pulumi.Input[str]):
        pulumi.set(self, "block_start", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[str]:
        """
        Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_week", value)


