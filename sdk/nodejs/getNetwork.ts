// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as unifi from "@pulumi/unifi";
 *
 * const lanNetwork = unifi.getNetwork({
 *     name: "LAN",
 * });
 * const myDevice = unifi.iam.getUser({
 *     mac: "01:23:45:67:89:ab",
 * });
 * const myNetwork = myDevice.then(myDevice => unifi.getNetwork({
 *     id: myDevice.networkId,
 * }));
 * ```
 */
export function getNetwork(args?: GetNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("unifi:index/getNetwork:getNetwork", {
        "id": args.id,
        "name": args.name,
        "site": args.site,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkArgs {
    /**
     * The ID of the network.
     */
    id?: string;
    /**
     * The name of the network.
     */
    name?: string;
    /**
     * The name of the site to associate the network with.
     */
    site?: string;
}

/**
 * A collection of values returned by getNetwork.
 */
export interface GetNetworkResult {
    /**
     * IPv4 addresses for the DNS server to be returned from the DHCP server.
     */
    readonly dhcpDns: string[];
    /**
     * whether DHCP is enabled or not on this network.
     */
    readonly dhcpEnabled: boolean;
    /**
     * lease time for DHCP addresses.
     */
    readonly dhcpLease: number;
    /**
     * The IPv4 address where the DHCP range of addresses starts.
     */
    readonly dhcpStart: string;
    /**
     * The IPv4 address where the DHCP range of addresses stops.
     */
    readonly dhcpStop: string;
    /**
     * Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.
     */
    readonly dhcpdBootEnabled: boolean;
    /**
     * the file to PXE boot from on the dhcpd*boot*server.
     */
    readonly dhcpdBootFilename: string;
    /**
     * IPv4 address of a TFTP server to network boot from.
     */
    readonly dhcpdBootServer: string;
    /**
     * The domain name of this network.
     */
    readonly domainName: string;
    /**
     * The ID of the network.
     */
    readonly id: string;
    /**
     * Specifies whether IGMP snooping is enabled or not.
     */
    readonly igmpSnooping: boolean;
    /**
     * Specifies which type of IPv6 connection to use.
     */
    readonly ipv6InterfaceType: string;
    /**
     * Specifies which WAN interface is used for IPv6 Prefix Delegation.
     */
    readonly ipv6PdInterface: string;
    /**
     * Specifies the IPv6 Prefix ID.
     */
    readonly ipv6PdPrefixid: string;
    /**
     * Specifies whether to enable router advertisements or not.
     */
    readonly ipv6RaEnable: boolean;
    /**
     * Specifies the static IPv6 subnet (when ipv6*interface*type is 'static').
     */
    readonly ipv6StaticSubnet: string;
    /**
     * The name of the network.
     */
    readonly name: string;
    /**
     * The group of the network.
     */
    readonly networkGroup: string;
    /**
     * The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.
     */
    readonly purpose: string;
    /**
     * The name of the site to associate the network with.
     */
    readonly site: string;
    /**
     * The subnet of the network (CIDR address).
     */
    readonly subnet: string;
    /**
     * The VLAN ID of the network.
     */
    readonly vlanId: number;
    /**
     * DNS servers IPs of the WAN.
     */
    readonly wanDns: string[];
    /**
     * Specifies the WAN egress quality of service.
     */
    readonly wanEgressQos: number;
    /**
     * The IPv4 gateway of the WAN.
     */
    readonly wanGateway: string;
    /**
     * The IPv4 address of the WAN.
     */
    readonly wanIp: string;
    /**
     * The IPv4 netmask of the WAN.
     */
    readonly wanNetmask: string;
    /**
     * Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     */
    readonly wanNetworkgroup: string;
    /**
     * Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.
     */
    readonly wanType: string;
    /**
     * Specifies the IPV4 WAN username.
     */
    readonly wanUsername: string;
    /**
     * Specifies the IPV4 WAN password.
     */
    readonly xWanPassword: string;
}

export function getNetworkOutput(args?: GetNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkResult> {
    return pulumi.output(args).apply(a => getNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkOutputArgs {
    /**
     * The ID of the network.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the site to associate the network with.
     */
    site?: pulumi.Input<string>;
}
