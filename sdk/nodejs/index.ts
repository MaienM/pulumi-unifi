// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./device";
export * from "./dynamicDNS";
export * from "./firewallGroup";
export * from "./firewallRule";
export * from "./getApGroup";
export * from "./getNetwork";
export * from "./getPortProfile";
export * from "./getRadiusProfile";
export * from "./getUser";
export * from "./getUserGroup";
export * from "./network";
export * from "./portForward";
export * from "./portProfile";
export * from "./provider";
export * from "./settingMgmt";
export * from "./settingUSG";
export * from "./site";
export * from "./staticRoute";
export * from "./user";
export * from "./userGroup";
export * from "./wlan";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Device } from "./device";
import { DynamicDNS } from "./dynamicDNS";
import { FirewallGroup } from "./firewallGroup";
import { FirewallRule } from "./firewallRule";
import { Network } from "./network";
import { PortForward } from "./portForward";
import { PortProfile } from "./portProfile";
import { SettingMgmt } from "./settingMgmt";
import { SettingUSG } from "./settingUSG";
import { Site } from "./site";
import { StaticRoute } from "./staticRoute";
import { User } from "./user";
import { UserGroup } from "./userGroup";
import { Wlan } from "./wlan";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "unifi:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "unifi:index/dynamicDNS:DynamicDNS":
                return new DynamicDNS(name, <any>undefined, { urn })
            case "unifi:index/firewallGroup:FirewallGroup":
                return new FirewallGroup(name, <any>undefined, { urn })
            case "unifi:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "unifi:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "unifi:index/portForward:PortForward":
                return new PortForward(name, <any>undefined, { urn })
            case "unifi:index/portProfile:PortProfile":
                return new PortProfile(name, <any>undefined, { urn })
            case "unifi:index/settingMgmt:SettingMgmt":
                return new SettingMgmt(name, <any>undefined, { urn })
            case "unifi:index/settingUSG:SettingUSG":
                return new SettingUSG(name, <any>undefined, { urn })
            case "unifi:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "unifi:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "unifi:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "unifi:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "unifi:index/wlan:Wlan":
                return new Wlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("unifi", "index/device", _module)
pulumi.runtime.registerResourceModule("unifi", "index/dynamicDNS", _module)
pulumi.runtime.registerResourceModule("unifi", "index/firewallGroup", _module)
pulumi.runtime.registerResourceModule("unifi", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("unifi", "index/network", _module)
pulumi.runtime.registerResourceModule("unifi", "index/portForward", _module)
pulumi.runtime.registerResourceModule("unifi", "index/portProfile", _module)
pulumi.runtime.registerResourceModule("unifi", "index/settingMgmt", _module)
pulumi.runtime.registerResourceModule("unifi", "index/settingUSG", _module)
pulumi.runtime.registerResourceModule("unifi", "index/site", _module)
pulumi.runtime.registerResourceModule("unifi", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("unifi", "index/user", _module)
pulumi.runtime.registerResourceModule("unifi", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("unifi", "index/wlan", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("unifi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:unifi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
