// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;

export { DynamicDNSArgs, DynamicDNSState } from "./dynamicDNS";
export type DynamicDNS = import("./dynamicDNS").DynamicDNS;
export const DynamicDNS: typeof import("./dynamicDNS").DynamicDNS = null as any;

export { GetApGroupArgs, GetApGroupResult, GetApGroupOutputArgs } from "./getApGroup";
export const getApGroup: typeof import("./getApGroup").getApGroup = null as any;
export const getApGroupOutput: typeof import("./getApGroup").getApGroupOutput = null as any;

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;

export { GetRadiusProfileArgs, GetRadiusProfileResult, GetRadiusProfileOutputArgs } from "./getRadiusProfile";
export const getRadiusProfile: typeof import("./getRadiusProfile").getRadiusProfile = null as any;
export const getRadiusProfileOutput: typeof import("./getRadiusProfile").getRadiusProfileOutput = null as any;

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;

export { WlanArgs, WlanState } from "./wlan";
export type Wlan = import("./wlan").Wlan;
export const Wlan: typeof import("./wlan").Wlan = null as any;

utilities.lazyLoad(exports, ["Device"], () => require("./device"));
utilities.lazyLoad(exports, ["DynamicDNS"], () => require("./dynamicDNS"));
utilities.lazyLoad(exports, ["getApGroup","getApGroupOutput"], () => require("./getApGroup"));
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));
utilities.lazyLoad(exports, ["getRadiusProfile","getRadiusProfileOutput"], () => require("./getRadiusProfile"));
utilities.lazyLoad(exports, ["Network"], () => require("./network"));
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
utilities.lazyLoad(exports, ["Site"], () => require("./site"));
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));
utilities.lazyLoad(exports, ["Wlan"], () => require("./wlan"));

// Export sub-modules:
import * as config from "./config";
import * as firewall from "./firewall";
import * as iam from "./iam";
import * as port from "./port";
import * as setting from "./setting";
import * as types from "./types";

export {
    config,
    firewall,
    iam,
    port,
    setting,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "unifi:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "unifi:index/dynamicDNS:DynamicDNS":
                return new DynamicDNS(name, <any>undefined, { urn })
            case "unifi:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "unifi:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "unifi:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "unifi:index/wlan:Wlan":
                return new Wlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("unifi", "index/device", _module)
pulumi.runtime.registerResourceModule("unifi", "index/dynamicDNS", _module)
pulumi.runtime.registerResourceModule("unifi", "index/network", _module)
pulumi.runtime.registerResourceModule("unifi", "index/site", _module)
pulumi.runtime.registerResourceModule("unifi", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("unifi", "index/wlan", _module)
pulumi.runtime.registerResourcePackage("unifi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:unifi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
