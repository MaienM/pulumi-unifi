// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.unifi.inputs.RadiusProfileAcctServerArgs;
import com.pulumiverse.unifi.inputs.RadiusProfileAuthServerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RadiusProfileState extends com.pulumi.resources.ResourceArgs {

    public static final RadiusProfileState Empty = new RadiusProfileState();

    /**
     * Specifies whether to use RADIUS accounting. Defaults to `false`.
     * 
     */
    @Import(name="accountingEnabled")
    private @Nullable Output<Boolean> accountingEnabled;

    /**
     * @return Specifies whether to use RADIUS accounting. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> accountingEnabled() {
        return Optional.ofNullable(this.accountingEnabled);
    }

    /**
     * RADIUS accounting servers.
     * 
     */
    @Import(name="acctServers")
    private @Nullable Output<List<RadiusProfileAcctServerArgs>> acctServers;

    /**
     * @return RADIUS accounting servers.
     * 
     */
    public Optional<Output<List<RadiusProfileAcctServerArgs>>> acctServers() {
        return Optional.ofNullable(this.acctServers);
    }

    /**
     * RADIUS authentication servers.
     * 
     */
    @Import(name="authServers")
    private @Nullable Output<List<RadiusProfileAuthServerArgs>> authServers;

    /**
     * @return RADIUS authentication servers.
     * 
     */
    public Optional<Output<List<RadiusProfileAuthServerArgs>>> authServers() {
        return Optional.ofNullable(this.authServers);
    }

    /**
     * Specifies whether to use interim_update. Defaults to `false`.
     * 
     */
    @Import(name="interimUpdateEnabled")
    private @Nullable Output<Boolean> interimUpdateEnabled;

    /**
     * @return Specifies whether to use interim_update. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> interimUpdateEnabled() {
        return Optional.ofNullable(this.interimUpdateEnabled);
    }

    /**
     * Specifies interim_update interval. Defaults to `3600`.
     * 
     */
    @Import(name="interimUpdateInterval")
    private @Nullable Output<Integer> interimUpdateInterval;

    /**
     * @return Specifies interim_update interval. Defaults to `3600`.
     * 
     */
    public Optional<Output<Integer>> interimUpdateInterval() {
        return Optional.ofNullable(this.interimUpdateInterval);
    }

    /**
     * The name of the profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the site to associate the settings with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the settings with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.
     * 
     */
    @Import(name="useUsgAcctServer")
    private @Nullable Output<Boolean> useUsgAcctServer;

    /**
     * @return Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> useUsgAcctServer() {
        return Optional.ofNullable(this.useUsgAcctServer);
    }

    /**
     * Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.
     * 
     */
    @Import(name="useUsgAuthServer")
    private @Nullable Output<Boolean> useUsgAuthServer;

    /**
     * @return Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> useUsgAuthServer() {
        return Optional.ofNullable(this.useUsgAuthServer);
    }

    /**
     * Specifies whether to use vlan on wired connections. Defaults to `false`.
     * 
     */
    @Import(name="vlanEnabled")
    private @Nullable Output<Boolean> vlanEnabled;

    /**
     * @return Specifies whether to use vlan on wired connections. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> vlanEnabled() {
        return Optional.ofNullable(this.vlanEnabled);
    }

    /**
     * Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.
     * 
     */
    @Import(name="vlanWlanMode")
    private @Nullable Output<String> vlanWlanMode;

    /**
     * @return Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.
     * 
     */
    public Optional<Output<String>> vlanWlanMode() {
        return Optional.ofNullable(this.vlanWlanMode);
    }

    private RadiusProfileState() {}

    private RadiusProfileState(RadiusProfileState $) {
        this.accountingEnabled = $.accountingEnabled;
        this.acctServers = $.acctServers;
        this.authServers = $.authServers;
        this.interimUpdateEnabled = $.interimUpdateEnabled;
        this.interimUpdateInterval = $.interimUpdateInterval;
        this.name = $.name;
        this.site = $.site;
        this.useUsgAcctServer = $.useUsgAcctServer;
        this.useUsgAuthServer = $.useUsgAuthServer;
        this.vlanEnabled = $.vlanEnabled;
        this.vlanWlanMode = $.vlanWlanMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RadiusProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RadiusProfileState $;

        public Builder() {
            $ = new RadiusProfileState();
        }

        public Builder(RadiusProfileState defaults) {
            $ = new RadiusProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountingEnabled Specifies whether to use RADIUS accounting. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder accountingEnabled(@Nullable Output<Boolean> accountingEnabled) {
            $.accountingEnabled = accountingEnabled;
            return this;
        }

        /**
         * @param accountingEnabled Specifies whether to use RADIUS accounting. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder accountingEnabled(Boolean accountingEnabled) {
            return accountingEnabled(Output.of(accountingEnabled));
        }

        /**
         * @param acctServers RADIUS accounting servers.
         * 
         * @return builder
         * 
         */
        public Builder acctServers(@Nullable Output<List<RadiusProfileAcctServerArgs>> acctServers) {
            $.acctServers = acctServers;
            return this;
        }

        /**
         * @param acctServers RADIUS accounting servers.
         * 
         * @return builder
         * 
         */
        public Builder acctServers(List<RadiusProfileAcctServerArgs> acctServers) {
            return acctServers(Output.of(acctServers));
        }

        /**
         * @param acctServers RADIUS accounting servers.
         * 
         * @return builder
         * 
         */
        public Builder acctServers(RadiusProfileAcctServerArgs... acctServers) {
            return acctServers(List.of(acctServers));
        }

        /**
         * @param authServers RADIUS authentication servers.
         * 
         * @return builder
         * 
         */
        public Builder authServers(@Nullable Output<List<RadiusProfileAuthServerArgs>> authServers) {
            $.authServers = authServers;
            return this;
        }

        /**
         * @param authServers RADIUS authentication servers.
         * 
         * @return builder
         * 
         */
        public Builder authServers(List<RadiusProfileAuthServerArgs> authServers) {
            return authServers(Output.of(authServers));
        }

        /**
         * @param authServers RADIUS authentication servers.
         * 
         * @return builder
         * 
         */
        public Builder authServers(RadiusProfileAuthServerArgs... authServers) {
            return authServers(List.of(authServers));
        }

        /**
         * @param interimUpdateEnabled Specifies whether to use interim_update. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateEnabled(@Nullable Output<Boolean> interimUpdateEnabled) {
            $.interimUpdateEnabled = interimUpdateEnabled;
            return this;
        }

        /**
         * @param interimUpdateEnabled Specifies whether to use interim_update. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateEnabled(Boolean interimUpdateEnabled) {
            return interimUpdateEnabled(Output.of(interimUpdateEnabled));
        }

        /**
         * @param interimUpdateInterval Specifies interim_update interval. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateInterval(@Nullable Output<Integer> interimUpdateInterval) {
            $.interimUpdateInterval = interimUpdateInterval;
            return this;
        }

        /**
         * @param interimUpdateInterval Specifies interim_update interval. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateInterval(Integer interimUpdateInterval) {
            return interimUpdateInterval(Output.of(interimUpdateInterval));
        }

        /**
         * @param name The name of the profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param useUsgAcctServer Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useUsgAcctServer(@Nullable Output<Boolean> useUsgAcctServer) {
            $.useUsgAcctServer = useUsgAcctServer;
            return this;
        }

        /**
         * @param useUsgAcctServer Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useUsgAcctServer(Boolean useUsgAcctServer) {
            return useUsgAcctServer(Output.of(useUsgAcctServer));
        }

        /**
         * @param useUsgAuthServer Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useUsgAuthServer(@Nullable Output<Boolean> useUsgAuthServer) {
            $.useUsgAuthServer = useUsgAuthServer;
            return this;
        }

        /**
         * @param useUsgAuthServer Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder useUsgAuthServer(Boolean useUsgAuthServer) {
            return useUsgAuthServer(Output.of(useUsgAuthServer));
        }

        /**
         * @param vlanEnabled Specifies whether to use vlan on wired connections. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vlanEnabled(@Nullable Output<Boolean> vlanEnabled) {
            $.vlanEnabled = vlanEnabled;
            return this;
        }

        /**
         * @param vlanEnabled Specifies whether to use vlan on wired connections. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vlanEnabled(Boolean vlanEnabled) {
            return vlanEnabled(Output.of(vlanEnabled));
        }

        /**
         * @param vlanWlanMode Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder vlanWlanMode(@Nullable Output<String> vlanWlanMode) {
            $.vlanWlanMode = vlanWlanMode;
            return this;
        }

        /**
         * @param vlanWlanMode Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder vlanWlanMode(String vlanWlanMode) {
            return vlanWlanMode(Output.of(vlanWlanMode));
        }

        public RadiusProfileState build() {
            return $;
        }
    }

}
