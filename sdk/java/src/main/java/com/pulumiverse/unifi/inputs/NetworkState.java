// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkState Empty = new NetworkState();

    /**
     * Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
     * 
     */
    @Import(name="dhcpDns")
    private @Nullable Output<List<String>> dhcpDns;

    /**
     * @return Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
     * 
     */
    public Optional<Output<List<String>>> dhcpDns() {
        return Optional.ofNullable(this.dhcpDns);
    }

    /**
     * Specifies whether DHCP is enabled or not on this network.
     * 
     */
    @Import(name="dhcpEnabled")
    private @Nullable Output<Boolean> dhcpEnabled;

    /**
     * @return Specifies whether DHCP is enabled or not on this network.
     * 
     */
    public Optional<Output<Boolean>> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }

    /**
     * Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
     * 
     */
    @Import(name="dhcpLease")
    private @Nullable Output<Integer> dhcpLease;

    /**
     * @return Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
     * 
     */
    public Optional<Output<Integer>> dhcpLease() {
        return Optional.ofNullable(this.dhcpLease);
    }

    /**
     * Specifies whether DHCP relay is enabled or not on this network.
     * 
     */
    @Import(name="dhcpRelayEnabled")
    private @Nullable Output<Boolean> dhcpRelayEnabled;

    /**
     * @return Specifies whether DHCP relay is enabled or not on this network.
     * 
     */
    public Optional<Output<Boolean>> dhcpRelayEnabled() {
        return Optional.ofNullable(this.dhcpRelayEnabled);
    }

    /**
     * The IPv4 address where the DHCP range of addresses starts.
     * 
     */
    @Import(name="dhcpStart")
    private @Nullable Output<String> dhcpStart;

    /**
     * @return The IPv4 address where the DHCP range of addresses starts.
     * 
     */
    public Optional<Output<String>> dhcpStart() {
        return Optional.ofNullable(this.dhcpStart);
    }

    /**
     * The IPv4 address where the DHCP range of addresses stops.
     * 
     */
    @Import(name="dhcpStop")
    private @Nullable Output<String> dhcpStop;

    /**
     * @return The IPv4 address where the DHCP range of addresses stops.
     * 
     */
    public Optional<Output<String>> dhcpStop() {
        return Optional.ofNullable(this.dhcpStop);
    }

    /**
     * Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
     * 
     */
    @Import(name="dhcpV6Dns")
    private @Nullable Output<List<String>> dhcpV6Dns;

    /**
     * @return Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
     * 
     */
    public Optional<Output<List<String>>> dhcpV6Dns() {
        return Optional.ofNullable(this.dhcpV6Dns);
    }

    /**
     * Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.
     * 
     */
    @Import(name="dhcpV6DnsAuto")
    private @Nullable Output<Boolean> dhcpV6DnsAuto;

    /**
     * @return Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> dhcpV6DnsAuto() {
        return Optional.ofNullable(this.dhcpV6DnsAuto);
    }

    /**
     * Enable stateful DHCPv6 for static configuration.
     * 
     */
    @Import(name="dhcpV6Enabled")
    private @Nullable Output<Boolean> dhcpV6Enabled;

    /**
     * @return Enable stateful DHCPv6 for static configuration.
     * 
     */
    public Optional<Output<Boolean>> dhcpV6Enabled() {
        return Optional.ofNullable(this.dhcpV6Enabled);
    }

    /**
     * Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
     * 
     */
    @Import(name="dhcpV6Lease")
    private @Nullable Output<Integer> dhcpV6Lease;

    /**
     * @return Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
     * 
     */
    public Optional<Output<Integer>> dhcpV6Lease() {
        return Optional.ofNullable(this.dhcpV6Lease);
    }

    /**
     * Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
     * 
     */
    @Import(name="dhcpV6Start")
    private @Nullable Output<String> dhcpV6Start;

    /**
     * @return Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
     * 
     */
    public Optional<Output<String>> dhcpV6Start() {
        return Optional.ofNullable(this.dhcpV6Start);
    }

    /**
     * End address of the DHCPv6 range. Used in static DHCPv6 configuration.
     * 
     */
    @Import(name="dhcpV6Stop")
    private @Nullable Output<String> dhcpV6Stop;

    /**
     * @return End address of the DHCPv6 range. Used in static DHCPv6 configuration.
     * 
     */
    public Optional<Output<String>> dhcpV6Stop() {
        return Optional.ofNullable(this.dhcpV6Stop);
    }

    /**
     * Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
     * 
     */
    @Import(name="dhcpdBootEnabled")
    private @Nullable Output<Boolean> dhcpdBootEnabled;

    /**
     * @return Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
     * 
     */
    public Optional<Output<Boolean>> dhcpdBootEnabled() {
        return Optional.ofNullable(this.dhcpdBootEnabled);
    }

    /**
     * Specifies the file to PXE boot from on the dhcpd*boot*server.
     * 
     */
    @Import(name="dhcpdBootFilename")
    private @Nullable Output<String> dhcpdBootFilename;

    /**
     * @return Specifies the file to PXE boot from on the dhcpd*boot*server.
     * 
     */
    public Optional<Output<String>> dhcpdBootFilename() {
        return Optional.ofNullable(this.dhcpdBootFilename);
    }

    /**
     * Specifies the IPv4 address of a TFTP server to network boot from.
     * 
     */
    @Import(name="dhcpdBootServer")
    private @Nullable Output<String> dhcpdBootServer;

    /**
     * @return Specifies the IPv4 address of a TFTP server to network boot from.
     * 
     */
    public Optional<Output<String>> dhcpdBootServer() {
        return Optional.ofNullable(this.dhcpdBootServer);
    }

    /**
     * The domain name of this network.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name of this network.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Specifies whether IGMP snooping is enabled or not.
     * 
     */
    @Import(name="igmpSnooping")
    private @Nullable Output<Boolean> igmpSnooping;

    /**
     * @return Specifies whether IGMP snooping is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> igmpSnooping() {
        return Optional.ofNullable(this.igmpSnooping);
    }

    /**
     * Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
     * 
     */
    @Import(name="internetAccessEnabled")
    private @Nullable Output<Boolean> internetAccessEnabled;

    /**
     * @return Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> internetAccessEnabled() {
        return Optional.ofNullable(this.internetAccessEnabled);
    }

    /**
     * Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
     * 
     */
    @Import(name="intraNetworkAccessEnabled")
    private @Nullable Output<Boolean> intraNetworkAccessEnabled;

    /**
     * @return Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> intraNetworkAccessEnabled() {
        return Optional.ofNullable(this.intraNetworkAccessEnabled);
    }

    /**
     * Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
     * 
     */
    @Import(name="ipv6InterfaceType")
    private @Nullable Output<String> ipv6InterfaceType;

    /**
     * @return Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> ipv6InterfaceType() {
        return Optional.ofNullable(this.ipv6InterfaceType);
    }

    /**
     * Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
     * 
     */
    @Import(name="ipv6PdInterface")
    private @Nullable Output<String> ipv6PdInterface;

    /**
     * @return Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
     * 
     */
    public Optional<Output<String>> ipv6PdInterface() {
        return Optional.ofNullable(this.ipv6PdInterface);
    }

    /**
     * Specifies the IPv6 Prefix ID.
     * 
     */
    @Import(name="ipv6PdPrefixid")
    private @Nullable Output<String> ipv6PdPrefixid;

    /**
     * @return Specifies the IPv6 Prefix ID.
     * 
     */
    public Optional<Output<String>> ipv6PdPrefixid() {
        return Optional.ofNullable(this.ipv6PdPrefixid);
    }

    /**
     * Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
     * 
     */
    @Import(name="ipv6PdStart")
    private @Nullable Output<String> ipv6PdStart;

    /**
     * @return Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
     * 
     */
    public Optional<Output<String>> ipv6PdStart() {
        return Optional.ofNullable(this.ipv6PdStart);
    }

    /**
     * End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
     * 
     */
    @Import(name="ipv6PdStop")
    private @Nullable Output<String> ipv6PdStop;

    /**
     * @return End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
     * 
     */
    public Optional<Output<String>> ipv6PdStop() {
        return Optional.ofNullable(this.ipv6PdStop);
    }

    /**
     * Specifies whether to enable router advertisements or not.
     * 
     */
    @Import(name="ipv6RaEnable")
    private @Nullable Output<Boolean> ipv6RaEnable;

    /**
     * @return Specifies whether to enable router advertisements or not.
     * 
     */
    public Optional<Output<Boolean>> ipv6RaEnable() {
        return Optional.ofNullable(this.ipv6RaEnable);
    }

    /**
     * Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.
     * 
     */
    @Import(name="ipv6RaPreferredLifetime")
    private @Nullable Output<Integer> ipv6RaPreferredLifetime;

    /**
     * @return Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.
     * 
     */
    public Optional<Output<Integer>> ipv6RaPreferredLifetime() {
        return Optional.ofNullable(this.ipv6RaPreferredLifetime);
    }

    /**
     * IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
     * 
     */
    @Import(name="ipv6RaPriority")
    private @Nullable Output<String> ipv6RaPriority;

    /**
     * @return IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
     * 
     */
    public Optional<Output<String>> ipv6RaPriority() {
        return Optional.ofNullable(this.ipv6RaPriority);
    }

    /**
     * Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.
     * 
     */
    @Import(name="ipv6RaValidLifetime")
    private @Nullable Output<Integer> ipv6RaValidLifetime;

    /**
     * @return Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.
     * 
     */
    public Optional<Output<Integer>> ipv6RaValidLifetime() {
        return Optional.ofNullable(this.ipv6RaValidLifetime);
    }

    /**
     * Specifies the static IPv6 subnet when `ipv6_interface_type` is &#39;static&#39;.
     * 
     */
    @Import(name="ipv6StaticSubnet")
    private @Nullable Output<String> ipv6StaticSubnet;

    /**
     * @return Specifies the static IPv6 subnet when `ipv6_interface_type` is &#39;static&#39;.
     * 
     */
    public Optional<Output<String>> ipv6StaticSubnet() {
        return Optional.ofNullable(this.ipv6StaticSubnet);
    }

    /**
     * Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller &gt;=v7).
     * 
     */
    @Import(name="multicastDns")
    private @Nullable Output<Boolean> multicastDns;

    /**
     * @return Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller &gt;=v7).
     * 
     */
    public Optional<Output<Boolean>> multicastDns() {
        return Optional.ofNullable(this.multicastDns);
    }

    /**
     * The name of the network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the network.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The group of the network. Defaults to `LAN`.
     * 
     */
    @Import(name="networkGroup")
    private @Nullable Output<String> networkGroup;

    /**
     * @return The group of the network. Defaults to `LAN`.
     * 
     */
    public Optional<Output<String>> networkGroup() {
        return Optional.ofNullable(this.networkGroup);
    }

    /**
     * The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<String> purpose;

    /**
     * @return The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
     * 
     */
    public Optional<Output<String>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * The name of the site to associate the network with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the network with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * The subnet of the network. Must be a valid CIDR address.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return The subnet of the network. Must be a valid CIDR address.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * The VLAN ID of the network.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return The VLAN ID of the network.
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
     * 
     */
    @Import(name="wanDhcpV6PdSize")
    private @Nullable Output<Integer> wanDhcpV6PdSize;

    /**
     * @return Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
     * 
     */
    public Optional<Output<Integer>> wanDhcpV6PdSize() {
        return Optional.ofNullable(this.wanDhcpV6PdSize);
    }

    /**
     * DNS servers IPs of the WAN.
     * 
     */
    @Import(name="wanDns")
    private @Nullable Output<List<String>> wanDns;

    /**
     * @return DNS servers IPs of the WAN.
     * 
     */
    public Optional<Output<List<String>>> wanDns() {
        return Optional.ofNullable(this.wanDns);
    }

    /**
     * Specifies the WAN egress quality of service. Defaults to `0`.
     * 
     */
    @Import(name="wanEgressQos")
    private @Nullable Output<Integer> wanEgressQos;

    /**
     * @return Specifies the WAN egress quality of service. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> wanEgressQos() {
        return Optional.ofNullable(this.wanEgressQos);
    }

    /**
     * The IPv4 gateway of the WAN.
     * 
     */
    @Import(name="wanGateway")
    private @Nullable Output<String> wanGateway;

    /**
     * @return The IPv4 gateway of the WAN.
     * 
     */
    public Optional<Output<String>> wanGateway() {
        return Optional.ofNullable(this.wanGateway);
    }

    /**
     * The IPv6 gateway of the WAN.
     * 
     */
    @Import(name="wanGatewayV6")
    private @Nullable Output<String> wanGatewayV6;

    /**
     * @return The IPv6 gateway of the WAN.
     * 
     */
    public Optional<Output<String>> wanGatewayV6() {
        return Optional.ofNullable(this.wanGatewayV6);
    }

    /**
     * The IPv4 address of the WAN.
     * 
     */
    @Import(name="wanIp")
    private @Nullable Output<String> wanIp;

    /**
     * @return The IPv4 address of the WAN.
     * 
     */
    public Optional<Output<String>> wanIp() {
        return Optional.ofNullable(this.wanIp);
    }

    /**
     * The IPv6 address of the WAN.
     * 
     */
    @Import(name="wanIpv6")
    private @Nullable Output<String> wanIpv6;

    /**
     * @return The IPv6 address of the WAN.
     * 
     */
    public Optional<Output<String>> wanIpv6() {
        return Optional.ofNullable(this.wanIpv6);
    }

    /**
     * The IPv4 netmask of the WAN.
     * 
     */
    @Import(name="wanNetmask")
    private @Nullable Output<String> wanNetmask;

    /**
     * @return The IPv4 netmask of the WAN.
     * 
     */
    public Optional<Output<String>> wanNetmask() {
        return Optional.ofNullable(this.wanNetmask);
    }

    /**
     * Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     * 
     */
    @Import(name="wanNetworkgroup")
    private @Nullable Output<String> wanNetworkgroup;

    /**
     * @return Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     * 
     */
    public Optional<Output<String>> wanNetworkgroup() {
        return Optional.ofNullable(this.wanNetworkgroup);
    }

    /**
     * The IPv6 prefix length of the WAN. Must be between 1 and 128.
     * 
     */
    @Import(name="wanPrefixlen")
    private @Nullable Output<Integer> wanPrefixlen;

    /**
     * @return The IPv6 prefix length of the WAN. Must be between 1 and 128.
     * 
     */
    public Optional<Output<Integer>> wanPrefixlen() {
        return Optional.ofNullable(this.wanPrefixlen);
    }

    /**
     * Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
     * 
     */
    @Import(name="wanType")
    private @Nullable Output<String> wanType;

    /**
     * @return Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
     * 
     */
    public Optional<Output<String>> wanType() {
        return Optional.ofNullable(this.wanType);
    }

    /**
     * Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
     * 
     */
    @Import(name="wanTypeV6")
    private @Nullable Output<String> wanTypeV6;

    /**
     * @return Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
     * 
     */
    public Optional<Output<String>> wanTypeV6() {
        return Optional.ofNullable(this.wanTypeV6);
    }

    /**
     * Specifies the IPV4 WAN username.
     * 
     */
    @Import(name="wanUsername")
    private @Nullable Output<String> wanUsername;

    /**
     * @return Specifies the IPV4 WAN username.
     * 
     */
    public Optional<Output<String>> wanUsername() {
        return Optional.ofNullable(this.wanUsername);
    }

    /**
     * Specifies the IPV4 WAN password.
     * 
     */
    @Import(name="xWanPassword")
    private @Nullable Output<String> xWanPassword;

    /**
     * @return Specifies the IPV4 WAN password.
     * 
     */
    public Optional<Output<String>> xWanPassword() {
        return Optional.ofNullable(this.xWanPassword);
    }

    private NetworkState() {}

    private NetworkState(NetworkState $) {
        this.dhcpDns = $.dhcpDns;
        this.dhcpEnabled = $.dhcpEnabled;
        this.dhcpLease = $.dhcpLease;
        this.dhcpRelayEnabled = $.dhcpRelayEnabled;
        this.dhcpStart = $.dhcpStart;
        this.dhcpStop = $.dhcpStop;
        this.dhcpV6Dns = $.dhcpV6Dns;
        this.dhcpV6DnsAuto = $.dhcpV6DnsAuto;
        this.dhcpV6Enabled = $.dhcpV6Enabled;
        this.dhcpV6Lease = $.dhcpV6Lease;
        this.dhcpV6Start = $.dhcpV6Start;
        this.dhcpV6Stop = $.dhcpV6Stop;
        this.dhcpdBootEnabled = $.dhcpdBootEnabled;
        this.dhcpdBootFilename = $.dhcpdBootFilename;
        this.dhcpdBootServer = $.dhcpdBootServer;
        this.domainName = $.domainName;
        this.igmpSnooping = $.igmpSnooping;
        this.internetAccessEnabled = $.internetAccessEnabled;
        this.intraNetworkAccessEnabled = $.intraNetworkAccessEnabled;
        this.ipv6InterfaceType = $.ipv6InterfaceType;
        this.ipv6PdInterface = $.ipv6PdInterface;
        this.ipv6PdPrefixid = $.ipv6PdPrefixid;
        this.ipv6PdStart = $.ipv6PdStart;
        this.ipv6PdStop = $.ipv6PdStop;
        this.ipv6RaEnable = $.ipv6RaEnable;
        this.ipv6RaPreferredLifetime = $.ipv6RaPreferredLifetime;
        this.ipv6RaPriority = $.ipv6RaPriority;
        this.ipv6RaValidLifetime = $.ipv6RaValidLifetime;
        this.ipv6StaticSubnet = $.ipv6StaticSubnet;
        this.multicastDns = $.multicastDns;
        this.name = $.name;
        this.networkGroup = $.networkGroup;
        this.purpose = $.purpose;
        this.site = $.site;
        this.subnet = $.subnet;
        this.vlanId = $.vlanId;
        this.wanDhcpV6PdSize = $.wanDhcpV6PdSize;
        this.wanDns = $.wanDns;
        this.wanEgressQos = $.wanEgressQos;
        this.wanGateway = $.wanGateway;
        this.wanGatewayV6 = $.wanGatewayV6;
        this.wanIp = $.wanIp;
        this.wanIpv6 = $.wanIpv6;
        this.wanNetmask = $.wanNetmask;
        this.wanNetworkgroup = $.wanNetworkgroup;
        this.wanPrefixlen = $.wanPrefixlen;
        this.wanType = $.wanType;
        this.wanTypeV6 = $.wanTypeV6;
        this.wanUsername = $.wanUsername;
        this.xWanPassword = $.xWanPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkState $;

        public Builder() {
            $ = new NetworkState();
        }

        public Builder(NetworkState defaults) {
            $ = new NetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcpDns Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(@Nullable Output<List<String>> dhcpDns) {
            $.dhcpDns = dhcpDns;
            return this;
        }

        /**
         * @param dhcpDns Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(List<String> dhcpDns) {
            return dhcpDns(Output.of(dhcpDns));
        }

        /**
         * @param dhcpDns Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(String... dhcpDns) {
            return dhcpDns(List.of(dhcpDns));
        }

        /**
         * @param dhcpEnabled Specifies whether DHCP is enabled or not on this network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(@Nullable Output<Boolean> dhcpEnabled) {
            $.dhcpEnabled = dhcpEnabled;
            return this;
        }

        /**
         * @param dhcpEnabled Specifies whether DHCP is enabled or not on this network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(Boolean dhcpEnabled) {
            return dhcpEnabled(Output.of(dhcpEnabled));
        }

        /**
         * @param dhcpLease Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpLease(@Nullable Output<Integer> dhcpLease) {
            $.dhcpLease = dhcpLease;
            return this;
        }

        /**
         * @param dhcpLease Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpLease(Integer dhcpLease) {
            return dhcpLease(Output.of(dhcpLease));
        }

        /**
         * @param dhcpRelayEnabled Specifies whether DHCP relay is enabled or not on this network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpRelayEnabled(@Nullable Output<Boolean> dhcpRelayEnabled) {
            $.dhcpRelayEnabled = dhcpRelayEnabled;
            return this;
        }

        /**
         * @param dhcpRelayEnabled Specifies whether DHCP relay is enabled or not on this network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpRelayEnabled(Boolean dhcpRelayEnabled) {
            return dhcpRelayEnabled(Output.of(dhcpRelayEnabled));
        }

        /**
         * @param dhcpStart The IPv4 address where the DHCP range of addresses starts.
         * 
         * @return builder
         * 
         */
        public Builder dhcpStart(@Nullable Output<String> dhcpStart) {
            $.dhcpStart = dhcpStart;
            return this;
        }

        /**
         * @param dhcpStart The IPv4 address where the DHCP range of addresses starts.
         * 
         * @return builder
         * 
         */
        public Builder dhcpStart(String dhcpStart) {
            return dhcpStart(Output.of(dhcpStart));
        }

        /**
         * @param dhcpStop The IPv4 address where the DHCP range of addresses stops.
         * 
         * @return builder
         * 
         */
        public Builder dhcpStop(@Nullable Output<String> dhcpStop) {
            $.dhcpStop = dhcpStop;
            return this;
        }

        /**
         * @param dhcpStop The IPv4 address where the DHCP range of addresses stops.
         * 
         * @return builder
         * 
         */
        public Builder dhcpStop(String dhcpStop) {
            return dhcpStop(Output.of(dhcpStop));
        }

        /**
         * @param dhcpV6Dns Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Dns(@Nullable Output<List<String>> dhcpV6Dns) {
            $.dhcpV6Dns = dhcpV6Dns;
            return this;
        }

        /**
         * @param dhcpV6Dns Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Dns(List<String> dhcpV6Dns) {
            return dhcpV6Dns(Output.of(dhcpV6Dns));
        }

        /**
         * @param dhcpV6Dns Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Dns(String... dhcpV6Dns) {
            return dhcpV6Dns(List.of(dhcpV6Dns));
        }

        /**
         * @param dhcpV6DnsAuto Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6DnsAuto(@Nullable Output<Boolean> dhcpV6DnsAuto) {
            $.dhcpV6DnsAuto = dhcpV6DnsAuto;
            return this;
        }

        /**
         * @param dhcpV6DnsAuto Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6DnsAuto(Boolean dhcpV6DnsAuto) {
            return dhcpV6DnsAuto(Output.of(dhcpV6DnsAuto));
        }

        /**
         * @param dhcpV6Enabled Enable stateful DHCPv6 for static configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Enabled(@Nullable Output<Boolean> dhcpV6Enabled) {
            $.dhcpV6Enabled = dhcpV6Enabled;
            return this;
        }

        /**
         * @param dhcpV6Enabled Enable stateful DHCPv6 for static configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Enabled(Boolean dhcpV6Enabled) {
            return dhcpV6Enabled(Output.of(dhcpV6Enabled));
        }

        /**
         * @param dhcpV6Lease Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Lease(@Nullable Output<Integer> dhcpV6Lease) {
            $.dhcpV6Lease = dhcpV6Lease;
            return this;
        }

        /**
         * @param dhcpV6Lease Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Lease(Integer dhcpV6Lease) {
            return dhcpV6Lease(Output.of(dhcpV6Lease));
        }

        /**
         * @param dhcpV6Start Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Start(@Nullable Output<String> dhcpV6Start) {
            $.dhcpV6Start = dhcpV6Start;
            return this;
        }

        /**
         * @param dhcpV6Start Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Start(String dhcpV6Start) {
            return dhcpV6Start(Output.of(dhcpV6Start));
        }

        /**
         * @param dhcpV6Stop End address of the DHCPv6 range. Used in static DHCPv6 configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Stop(@Nullable Output<String> dhcpV6Stop) {
            $.dhcpV6Stop = dhcpV6Stop;
            return this;
        }

        /**
         * @param dhcpV6Stop End address of the DHCPv6 range. Used in static DHCPv6 configuration.
         * 
         * @return builder
         * 
         */
        public Builder dhcpV6Stop(String dhcpV6Stop) {
            return dhcpV6Stop(Output.of(dhcpV6Stop));
        }

        /**
         * @param dhcpdBootEnabled Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootEnabled(@Nullable Output<Boolean> dhcpdBootEnabled) {
            $.dhcpdBootEnabled = dhcpdBootEnabled;
            return this;
        }

        /**
         * @param dhcpdBootEnabled Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootEnabled(Boolean dhcpdBootEnabled) {
            return dhcpdBootEnabled(Output.of(dhcpdBootEnabled));
        }

        /**
         * @param dhcpdBootFilename Specifies the file to PXE boot from on the dhcpd*boot*server.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootFilename(@Nullable Output<String> dhcpdBootFilename) {
            $.dhcpdBootFilename = dhcpdBootFilename;
            return this;
        }

        /**
         * @param dhcpdBootFilename Specifies the file to PXE boot from on the dhcpd*boot*server.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootFilename(String dhcpdBootFilename) {
            return dhcpdBootFilename(Output.of(dhcpdBootFilename));
        }

        /**
         * @param dhcpdBootServer Specifies the IPv4 address of a TFTP server to network boot from.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootServer(@Nullable Output<String> dhcpdBootServer) {
            $.dhcpdBootServer = dhcpdBootServer;
            return this;
        }

        /**
         * @param dhcpdBootServer Specifies the IPv4 address of a TFTP server to network boot from.
         * 
         * @return builder
         * 
         */
        public Builder dhcpdBootServer(String dhcpdBootServer) {
            return dhcpdBootServer(Output.of(dhcpdBootServer));
        }

        /**
         * @param domainName The domain name of this network.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name of this network.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param igmpSnooping Specifies whether IGMP snooping is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder igmpSnooping(@Nullable Output<Boolean> igmpSnooping) {
            $.igmpSnooping = igmpSnooping;
            return this;
        }

        /**
         * @param igmpSnooping Specifies whether IGMP snooping is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder igmpSnooping(Boolean igmpSnooping) {
            return igmpSnooping(Output.of(igmpSnooping));
        }

        /**
         * @param internetAccessEnabled Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder internetAccessEnabled(@Nullable Output<Boolean> internetAccessEnabled) {
            $.internetAccessEnabled = internetAccessEnabled;
            return this;
        }

        /**
         * @param internetAccessEnabled Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder internetAccessEnabled(Boolean internetAccessEnabled) {
            return internetAccessEnabled(Output.of(internetAccessEnabled));
        }

        /**
         * @param intraNetworkAccessEnabled Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder intraNetworkAccessEnabled(@Nullable Output<Boolean> intraNetworkAccessEnabled) {
            $.intraNetworkAccessEnabled = intraNetworkAccessEnabled;
            return this;
        }

        /**
         * @param intraNetworkAccessEnabled Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder intraNetworkAccessEnabled(Boolean intraNetworkAccessEnabled) {
            return intraNetworkAccessEnabled(Output.of(intraNetworkAccessEnabled));
        }

        /**
         * @param ipv6InterfaceType Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6InterfaceType(@Nullable Output<String> ipv6InterfaceType) {
            $.ipv6InterfaceType = ipv6InterfaceType;
            return this;
        }

        /**
         * @param ipv6InterfaceType Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6InterfaceType(String ipv6InterfaceType) {
            return ipv6InterfaceType(Output.of(ipv6InterfaceType));
        }

        /**
         * @param ipv6PdInterface Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdInterface(@Nullable Output<String> ipv6PdInterface) {
            $.ipv6PdInterface = ipv6PdInterface;
            return this;
        }

        /**
         * @param ipv6PdInterface Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdInterface(String ipv6PdInterface) {
            return ipv6PdInterface(Output.of(ipv6PdInterface));
        }

        /**
         * @param ipv6PdPrefixid Specifies the IPv6 Prefix ID.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdPrefixid(@Nullable Output<String> ipv6PdPrefixid) {
            $.ipv6PdPrefixid = ipv6PdPrefixid;
            return this;
        }

        /**
         * @param ipv6PdPrefixid Specifies the IPv6 Prefix ID.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdPrefixid(String ipv6PdPrefixid) {
            return ipv6PdPrefixid(Output.of(ipv6PdPrefixid));
        }

        /**
         * @param ipv6PdStart Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdStart(@Nullable Output<String> ipv6PdStart) {
            $.ipv6PdStart = ipv6PdStart;
            return this;
        }

        /**
         * @param ipv6PdStart Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdStart(String ipv6PdStart) {
            return ipv6PdStart(Output.of(ipv6PdStart));
        }

        /**
         * @param ipv6PdStop End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdStop(@Nullable Output<String> ipv6PdStop) {
            $.ipv6PdStop = ipv6PdStop;
            return this;
        }

        /**
         * @param ipv6PdStop End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6PdStop(String ipv6PdStop) {
            return ipv6PdStop(Output.of(ipv6PdStop));
        }

        /**
         * @param ipv6RaEnable Specifies whether to enable router advertisements or not.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaEnable(@Nullable Output<Boolean> ipv6RaEnable) {
            $.ipv6RaEnable = ipv6RaEnable;
            return this;
        }

        /**
         * @param ipv6RaEnable Specifies whether to enable router advertisements or not.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaEnable(Boolean ipv6RaEnable) {
            return ipv6RaEnable(Output.of(ipv6RaEnable));
        }

        /**
         * @param ipv6RaPreferredLifetime Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaPreferredLifetime(@Nullable Output<Integer> ipv6RaPreferredLifetime) {
            $.ipv6RaPreferredLifetime = ipv6RaPreferredLifetime;
            return this;
        }

        /**
         * @param ipv6RaPreferredLifetime Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaPreferredLifetime(Integer ipv6RaPreferredLifetime) {
            return ipv6RaPreferredLifetime(Output.of(ipv6RaPreferredLifetime));
        }

        /**
         * @param ipv6RaPriority IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaPriority(@Nullable Output<String> ipv6RaPriority) {
            $.ipv6RaPriority = ipv6RaPriority;
            return this;
        }

        /**
         * @param ipv6RaPriority IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaPriority(String ipv6RaPriority) {
            return ipv6RaPriority(Output.of(ipv6RaPriority));
        }

        /**
         * @param ipv6RaValidLifetime Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaValidLifetime(@Nullable Output<Integer> ipv6RaValidLifetime) {
            $.ipv6RaValidLifetime = ipv6RaValidLifetime;
            return this;
        }

        /**
         * @param ipv6RaValidLifetime Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaValidLifetime(Integer ipv6RaValidLifetime) {
            return ipv6RaValidLifetime(Output.of(ipv6RaValidLifetime));
        }

        /**
         * @param ipv6StaticSubnet Specifies the static IPv6 subnet when `ipv6_interface_type` is &#39;static&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipv6StaticSubnet(@Nullable Output<String> ipv6StaticSubnet) {
            $.ipv6StaticSubnet = ipv6StaticSubnet;
            return this;
        }

        /**
         * @param ipv6StaticSubnet Specifies the static IPv6 subnet when `ipv6_interface_type` is &#39;static&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipv6StaticSubnet(String ipv6StaticSubnet) {
            return ipv6StaticSubnet(Output.of(ipv6StaticSubnet));
        }

        /**
         * @param multicastDns Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller &gt;=v7).
         * 
         * @return builder
         * 
         */
        public Builder multicastDns(@Nullable Output<Boolean> multicastDns) {
            $.multicastDns = multicastDns;
            return this;
        }

        /**
         * @param multicastDns Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller &gt;=v7).
         * 
         * @return builder
         * 
         */
        public Builder multicastDns(Boolean multicastDns) {
            return multicastDns(Output.of(multicastDns));
        }

        /**
         * @param name The name of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkGroup The group of the network. Defaults to `LAN`.
         * 
         * @return builder
         * 
         */
        public Builder networkGroup(@Nullable Output<String> networkGroup) {
            $.networkGroup = networkGroup;
            return this;
        }

        /**
         * @param networkGroup The group of the network. Defaults to `LAN`.
         * 
         * @return builder
         * 
         */
        public Builder networkGroup(String networkGroup) {
            return networkGroup(Output.of(networkGroup));
        }

        /**
         * @param purpose The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(@Nullable Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        /**
         * @param purpose The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        /**
         * @param site The name of the site to associate the network with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the network with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param subnet The subnet of the network. Must be a valid CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The subnet of the network. Must be a valid CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param vlanId The VLAN ID of the network.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId The VLAN ID of the network.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param wanDhcpV6PdSize Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
         * 
         * @return builder
         * 
         */
        public Builder wanDhcpV6PdSize(@Nullable Output<Integer> wanDhcpV6PdSize) {
            $.wanDhcpV6PdSize = wanDhcpV6PdSize;
            return this;
        }

        /**
         * @param wanDhcpV6PdSize Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
         * 
         * @return builder
         * 
         */
        public Builder wanDhcpV6PdSize(Integer wanDhcpV6PdSize) {
            return wanDhcpV6PdSize(Output.of(wanDhcpV6PdSize));
        }

        /**
         * @param wanDns DNS servers IPs of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanDns(@Nullable Output<List<String>> wanDns) {
            $.wanDns = wanDns;
            return this;
        }

        /**
         * @param wanDns DNS servers IPs of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanDns(List<String> wanDns) {
            return wanDns(Output.of(wanDns));
        }

        /**
         * @param wanDns DNS servers IPs of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanDns(String... wanDns) {
            return wanDns(List.of(wanDns));
        }

        /**
         * @param wanEgressQos Specifies the WAN egress quality of service. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder wanEgressQos(@Nullable Output<Integer> wanEgressQos) {
            $.wanEgressQos = wanEgressQos;
            return this;
        }

        /**
         * @param wanEgressQos Specifies the WAN egress quality of service. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder wanEgressQos(Integer wanEgressQos) {
            return wanEgressQos(Output.of(wanEgressQos));
        }

        /**
         * @param wanGateway The IPv4 gateway of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanGateway(@Nullable Output<String> wanGateway) {
            $.wanGateway = wanGateway;
            return this;
        }

        /**
         * @param wanGateway The IPv4 gateway of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanGateway(String wanGateway) {
            return wanGateway(Output.of(wanGateway));
        }

        /**
         * @param wanGatewayV6 The IPv6 gateway of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanGatewayV6(@Nullable Output<String> wanGatewayV6) {
            $.wanGatewayV6 = wanGatewayV6;
            return this;
        }

        /**
         * @param wanGatewayV6 The IPv6 gateway of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanGatewayV6(String wanGatewayV6) {
            return wanGatewayV6(Output.of(wanGatewayV6));
        }

        /**
         * @param wanIp The IPv4 address of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanIp(@Nullable Output<String> wanIp) {
            $.wanIp = wanIp;
            return this;
        }

        /**
         * @param wanIp The IPv4 address of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanIp(String wanIp) {
            return wanIp(Output.of(wanIp));
        }

        /**
         * @param wanIpv6 The IPv6 address of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanIpv6(@Nullable Output<String> wanIpv6) {
            $.wanIpv6 = wanIpv6;
            return this;
        }

        /**
         * @param wanIpv6 The IPv6 address of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanIpv6(String wanIpv6) {
            return wanIpv6(Output.of(wanIpv6));
        }

        /**
         * @param wanNetmask The IPv4 netmask of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanNetmask(@Nullable Output<String> wanNetmask) {
            $.wanNetmask = wanNetmask;
            return this;
        }

        /**
         * @param wanNetmask The IPv4 netmask of the WAN.
         * 
         * @return builder
         * 
         */
        public Builder wanNetmask(String wanNetmask) {
            return wanNetmask(Output.of(wanNetmask));
        }

        /**
         * @param wanNetworkgroup Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
         * 
         * @return builder
         * 
         */
        public Builder wanNetworkgroup(@Nullable Output<String> wanNetworkgroup) {
            $.wanNetworkgroup = wanNetworkgroup;
            return this;
        }

        /**
         * @param wanNetworkgroup Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
         * 
         * @return builder
         * 
         */
        public Builder wanNetworkgroup(String wanNetworkgroup) {
            return wanNetworkgroup(Output.of(wanNetworkgroup));
        }

        /**
         * @param wanPrefixlen The IPv6 prefix length of the WAN. Must be between 1 and 128.
         * 
         * @return builder
         * 
         */
        public Builder wanPrefixlen(@Nullable Output<Integer> wanPrefixlen) {
            $.wanPrefixlen = wanPrefixlen;
            return this;
        }

        /**
         * @param wanPrefixlen The IPv6 prefix length of the WAN. Must be between 1 and 128.
         * 
         * @return builder
         * 
         */
        public Builder wanPrefixlen(Integer wanPrefixlen) {
            return wanPrefixlen(Output.of(wanPrefixlen));
        }

        /**
         * @param wanType Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
         * 
         * @return builder
         * 
         */
        public Builder wanType(@Nullable Output<String> wanType) {
            $.wanType = wanType;
            return this;
        }

        /**
         * @param wanType Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
         * 
         * @return builder
         * 
         */
        public Builder wanType(String wanType) {
            return wanType(Output.of(wanType));
        }

        /**
         * @param wanTypeV6 Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
         * 
         * @return builder
         * 
         */
        public Builder wanTypeV6(@Nullable Output<String> wanTypeV6) {
            $.wanTypeV6 = wanTypeV6;
            return this;
        }

        /**
         * @param wanTypeV6 Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
         * 
         * @return builder
         * 
         */
        public Builder wanTypeV6(String wanTypeV6) {
            return wanTypeV6(Output.of(wanTypeV6));
        }

        /**
         * @param wanUsername Specifies the IPV4 WAN username.
         * 
         * @return builder
         * 
         */
        public Builder wanUsername(@Nullable Output<String> wanUsername) {
            $.wanUsername = wanUsername;
            return this;
        }

        /**
         * @param wanUsername Specifies the IPV4 WAN username.
         * 
         * @return builder
         * 
         */
        public Builder wanUsername(String wanUsername) {
            return wanUsername(Output.of(wanUsername));
        }

        /**
         * @param xWanPassword Specifies the IPV4 WAN password.
         * 
         * @return builder
         * 
         */
        public Builder xWanPassword(@Nullable Output<String> xWanPassword) {
            $.xWanPassword = xWanPassword;
            return this;
        }

        /**
         * @param xWanPassword Specifies the IPV4 WAN password.
         * 
         * @return builder
         * 
         */
        public Builder xWanPassword(String xWanPassword) {
            return xWanPassword(Output.of(xWanPassword));
        }

        public NetworkState build() {
            return $;
        }
    }

}
