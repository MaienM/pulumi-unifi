// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.setting.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RadiusState extends com.pulumi.resources.ResourceArgs {

    public static final RadiusState Empty = new RadiusState();

    /**
     * Enable RADIUS accounting Defaults to `false`.
     * 
     */
    @Import(name="accountingEnabled")
    private @Nullable Output<Boolean> accountingEnabled;

    /**
     * @return Enable RADIUS accounting Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> accountingEnabled() {
        return Optional.ofNullable(this.accountingEnabled);
    }

    /**
     * The port for accounting communications. Defaults to `1813`.
     * 
     */
    @Import(name="accountingPort")
    private @Nullable Output<Integer> accountingPort;

    /**
     * @return The port for accounting communications. Defaults to `1813`.
     * 
     */
    public Optional<Output<Integer>> accountingPort() {
        return Optional.ofNullable(this.accountingPort);
    }

    /**
     * The port for authentication communications. Defaults to `1812`.
     * 
     */
    @Import(name="authPort")
    private @Nullable Output<Integer> authPort;

    /**
     * @return The port for authentication communications. Defaults to `1812`.
     * 
     */
    public Optional<Output<Integer>> authPort() {
        return Optional.ofNullable(this.authPort);
    }

    /**
     * RAIDUS server enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return RAIDUS server enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Statistics will be collected from connected clients at this interval. Defaults to `3600`.
     * 
     */
    @Import(name="interimUpdateInterval")
    private @Nullable Output<Integer> interimUpdateInterval;

    /**
     * @return Statistics will be collected from connected clients at this interval. Defaults to `3600`.
     * 
     */
    public Optional<Output<Integer>> interimUpdateInterval() {
        return Optional.ofNullable(this.interimUpdateInterval);
    }

    /**
     * RAIDUS secret passphrase. Defaults to ``.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return RAIDUS secret passphrase. Defaults to ``.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * The name of the site to associate the settings with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the settings with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * Encrypt communication between the server and the client. Defaults to `true`.
     * 
     */
    @Import(name="tunneledReply")
    private @Nullable Output<Boolean> tunneledReply;

    /**
     * @return Encrypt communication between the server and the client. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> tunneledReply() {
        return Optional.ofNullable(this.tunneledReply);
    }

    private RadiusState() {}

    private RadiusState(RadiusState $) {
        this.accountingEnabled = $.accountingEnabled;
        this.accountingPort = $.accountingPort;
        this.authPort = $.authPort;
        this.enabled = $.enabled;
        this.interimUpdateInterval = $.interimUpdateInterval;
        this.secret = $.secret;
        this.site = $.site;
        this.tunneledReply = $.tunneledReply;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RadiusState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RadiusState $;

        public Builder() {
            $ = new RadiusState();
        }

        public Builder(RadiusState defaults) {
            $ = new RadiusState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountingEnabled Enable RADIUS accounting Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder accountingEnabled(@Nullable Output<Boolean> accountingEnabled) {
            $.accountingEnabled = accountingEnabled;
            return this;
        }

        /**
         * @param accountingEnabled Enable RADIUS accounting Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder accountingEnabled(Boolean accountingEnabled) {
            return accountingEnabled(Output.of(accountingEnabled));
        }

        /**
         * @param accountingPort The port for accounting communications. Defaults to `1813`.
         * 
         * @return builder
         * 
         */
        public Builder accountingPort(@Nullable Output<Integer> accountingPort) {
            $.accountingPort = accountingPort;
            return this;
        }

        /**
         * @param accountingPort The port for accounting communications. Defaults to `1813`.
         * 
         * @return builder
         * 
         */
        public Builder accountingPort(Integer accountingPort) {
            return accountingPort(Output.of(accountingPort));
        }

        /**
         * @param authPort The port for authentication communications. Defaults to `1812`.
         * 
         * @return builder
         * 
         */
        public Builder authPort(@Nullable Output<Integer> authPort) {
            $.authPort = authPort;
            return this;
        }

        /**
         * @param authPort The port for authentication communications. Defaults to `1812`.
         * 
         * @return builder
         * 
         */
        public Builder authPort(Integer authPort) {
            return authPort(Output.of(authPort));
        }

        /**
         * @param enabled RAIDUS server enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled RAIDUS server enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param interimUpdateInterval Statistics will be collected from connected clients at this interval. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateInterval(@Nullable Output<Integer> interimUpdateInterval) {
            $.interimUpdateInterval = interimUpdateInterval;
            return this;
        }

        /**
         * @param interimUpdateInterval Statistics will be collected from connected clients at this interval. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interimUpdateInterval(Integer interimUpdateInterval) {
            return interimUpdateInterval(Output.of(interimUpdateInterval));
        }

        /**
         * @param secret RAIDUS secret passphrase. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret RAIDUS secret passphrase. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param tunneledReply Encrypt communication between the server and the client. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder tunneledReply(@Nullable Output<Boolean> tunneledReply) {
            $.tunneledReply = tunneledReply;
            return this;
        }

        /**
         * @param tunneledReply Encrypt communication between the server and the client. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder tunneledReply(Boolean tunneledReply) {
            return tunneledReply(Output.of(tunneledReply));
        }

        public RadiusState build() {
            return $;
        }
    }

}
