// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.unifi.inputs.DevicePortOverrideArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceState extends com.pulumi.resources.ResourceArgs {

    public static final DeviceState Empty = new DeviceState();

    /**
     * Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
     * 
     */
    @Import(name="allowAdoption")
    private @Nullable Output<Boolean> allowAdoption;

    /**
     * @return Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> allowAdoption() {
        return Optional.ofNullable(this.allowAdoption);
    }

    /**
     * Specifies whether this device should be disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Specifies whether this device should be disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
     * 
     */
    @Import(name="forgetOnDestroy")
    private @Nullable Output<Boolean> forgetOnDestroy;

    /**
     * @return Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> forgetOnDestroy() {
        return Optional.ofNullable(this.forgetOnDestroy);
    }

    /**
     * The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * The name of the device.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the device.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Settings overrides for specific switch ports.
     * 
     */
    @Import(name="portOverrides")
    private @Nullable Output<List<DevicePortOverrideArgs>> portOverrides;

    /**
     * @return Settings overrides for specific switch ports.
     * 
     */
    public Optional<Output<List<DevicePortOverrideArgs>>> portOverrides() {
        return Optional.ofNullable(this.portOverrides);
    }

    /**
     * The name of the site to associate the device with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the device with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    private DeviceState() {}

    private DeviceState(DeviceState $) {
        this.allowAdoption = $.allowAdoption;
        this.disabled = $.disabled;
        this.forgetOnDestroy = $.forgetOnDestroy;
        this.mac = $.mac;
        this.name = $.name;
        this.portOverrides = $.portOverrides;
        this.site = $.site;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceState $;

        public Builder() {
            $ = new DeviceState();
        }

        public Builder(DeviceState defaults) {
            $ = new DeviceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAdoption Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowAdoption(@Nullable Output<Boolean> allowAdoption) {
            $.allowAdoption = allowAdoption;
            return this;
        }

        /**
         * @param allowAdoption Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowAdoption(Boolean allowAdoption) {
            return allowAdoption(Output.of(allowAdoption));
        }

        /**
         * @param disabled Specifies whether this device should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Specifies whether this device should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param forgetOnDestroy Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder forgetOnDestroy(@Nullable Output<Boolean> forgetOnDestroy) {
            $.forgetOnDestroy = forgetOnDestroy;
            return this;
        }

        /**
         * @param forgetOnDestroy Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder forgetOnDestroy(Boolean forgetOnDestroy) {
            return forgetOnDestroy(Output.of(forgetOnDestroy));
        }

        /**
         * @param mac The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param name The name of the device.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the device.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portOverrides Settings overrides for specific switch ports.
         * 
         * @return builder
         * 
         */
        public Builder portOverrides(@Nullable Output<List<DevicePortOverrideArgs>> portOverrides) {
            $.portOverrides = portOverrides;
            return this;
        }

        /**
         * @param portOverrides Settings overrides for specific switch ports.
         * 
         * @return builder
         * 
         */
        public Builder portOverrides(List<DevicePortOverrideArgs> portOverrides) {
            return portOverrides(Output.of(portOverrides));
        }

        /**
         * @param portOverrides Settings overrides for specific switch ports.
         * 
         * @return builder
         * 
         */
        public Builder portOverrides(DevicePortOverrideArgs... portOverrides) {
            return portOverrides(List.of(portOverrides));
        }

        /**
         * @param site The name of the site to associate the device with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the device with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        public DeviceState build() {
            return $;
        }
    }

}
