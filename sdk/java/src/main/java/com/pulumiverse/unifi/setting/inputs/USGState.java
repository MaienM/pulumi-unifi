// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.setting.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class USGState extends com.pulumi.resources.ResourceArgs {

    public static final USGState Empty = new USGState();

    /**
     * The DHCP relay servers.
     * 
     */
    @Import(name="dhcpRelayServers")
    private @Nullable Output<List<String>> dhcpRelayServers;

    /**
     * @return The DHCP relay servers.
     * 
     */
    public Optional<Output<List<String>>> dhcpRelayServers() {
        return Optional.ofNullable(this.dhcpRelayServers);
    }

    /**
     * Whether the guest firewall log is enabled.
     * 
     */
    @Import(name="firewallGuestDefaultLog")
    private @Nullable Output<Boolean> firewallGuestDefaultLog;

    /**
     * @return Whether the guest firewall log is enabled.
     * 
     */
    public Optional<Output<Boolean>> firewallGuestDefaultLog() {
        return Optional.ofNullable(this.firewallGuestDefaultLog);
    }

    /**
     * Whether the LAN firewall log is enabled.
     * 
     */
    @Import(name="firewallLanDefaultLog")
    private @Nullable Output<Boolean> firewallLanDefaultLog;

    /**
     * @return Whether the LAN firewall log is enabled.
     * 
     */
    public Optional<Output<Boolean>> firewallLanDefaultLog() {
        return Optional.ofNullable(this.firewallLanDefaultLog);
    }

    /**
     * Whether the WAN firewall log is enabled.
     * 
     */
    @Import(name="firewallWanDefaultLog")
    private @Nullable Output<Boolean> firewallWanDefaultLog;

    /**
     * @return Whether the WAN firewall log is enabled.
     * 
     */
    public Optional<Output<Boolean>> firewallWanDefaultLog() {
        return Optional.ofNullable(this.firewallWanDefaultLog);
    }

    /**
     * Whether multicast DNS is enabled.
     * 
     */
    @Import(name="multicastDnsEnabled")
    private @Nullable Output<Boolean> multicastDnsEnabled;

    /**
     * @return Whether multicast DNS is enabled.
     * 
     */
    public Optional<Output<Boolean>> multicastDnsEnabled() {
        return Optional.ofNullable(this.multicastDnsEnabled);
    }

    /**
     * The name of the site to associate the settings with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the settings with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    private USGState() {}

    private USGState(USGState $) {
        this.dhcpRelayServers = $.dhcpRelayServers;
        this.firewallGuestDefaultLog = $.firewallGuestDefaultLog;
        this.firewallLanDefaultLog = $.firewallLanDefaultLog;
        this.firewallWanDefaultLog = $.firewallWanDefaultLog;
        this.multicastDnsEnabled = $.multicastDnsEnabled;
        this.site = $.site;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(USGState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private USGState $;

        public Builder() {
            $ = new USGState();
        }

        public Builder(USGState defaults) {
            $ = new USGState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcpRelayServers The DHCP relay servers.
         * 
         * @return builder
         * 
         */
        public Builder dhcpRelayServers(@Nullable Output<List<String>> dhcpRelayServers) {
            $.dhcpRelayServers = dhcpRelayServers;
            return this;
        }

        /**
         * @param dhcpRelayServers The DHCP relay servers.
         * 
         * @return builder
         * 
         */
        public Builder dhcpRelayServers(List<String> dhcpRelayServers) {
            return dhcpRelayServers(Output.of(dhcpRelayServers));
        }

        /**
         * @param dhcpRelayServers The DHCP relay servers.
         * 
         * @return builder
         * 
         */
        public Builder dhcpRelayServers(String... dhcpRelayServers) {
            return dhcpRelayServers(List.of(dhcpRelayServers));
        }

        /**
         * @param firewallGuestDefaultLog Whether the guest firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallGuestDefaultLog(@Nullable Output<Boolean> firewallGuestDefaultLog) {
            $.firewallGuestDefaultLog = firewallGuestDefaultLog;
            return this;
        }

        /**
         * @param firewallGuestDefaultLog Whether the guest firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallGuestDefaultLog(Boolean firewallGuestDefaultLog) {
            return firewallGuestDefaultLog(Output.of(firewallGuestDefaultLog));
        }

        /**
         * @param firewallLanDefaultLog Whether the LAN firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallLanDefaultLog(@Nullable Output<Boolean> firewallLanDefaultLog) {
            $.firewallLanDefaultLog = firewallLanDefaultLog;
            return this;
        }

        /**
         * @param firewallLanDefaultLog Whether the LAN firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallLanDefaultLog(Boolean firewallLanDefaultLog) {
            return firewallLanDefaultLog(Output.of(firewallLanDefaultLog));
        }

        /**
         * @param firewallWanDefaultLog Whether the WAN firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallWanDefaultLog(@Nullable Output<Boolean> firewallWanDefaultLog) {
            $.firewallWanDefaultLog = firewallWanDefaultLog;
            return this;
        }

        /**
         * @param firewallWanDefaultLog Whether the WAN firewall log is enabled.
         * 
         * @return builder
         * 
         */
        public Builder firewallWanDefaultLog(Boolean firewallWanDefaultLog) {
            return firewallWanDefaultLog(Output.of(firewallWanDefaultLog));
        }

        /**
         * @param multicastDnsEnabled Whether multicast DNS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder multicastDnsEnabled(@Nullable Output<Boolean> multicastDnsEnabled) {
            $.multicastDnsEnabled = multicastDnsEnabled;
            return this;
        }

        /**
         * @param multicastDnsEnabled Whether multicast DNS is enabled.
         * 
         * @return builder
         * 
         */
        public Builder multicastDnsEnabled(Boolean multicastDnsEnabled) {
            return multicastDnsEnabled(Output.of(multicastDnsEnabled));
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the settings with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        public USGState build() {
            return $;
        }
    }

}
