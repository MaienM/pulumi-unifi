// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StaticRouteState extends com.pulumi.resources.ResourceArgs {

    public static final StaticRouteState Empty = new StaticRouteState();

    /**
     * The distance of the static route.
     * 
     */
    @Import(name="distance")
    private @Nullable Output<Integer> distance;

    /**
     * @return The distance of the static route.
     * 
     */
    public Optional<Output<Integer>> distance() {
        return Optional.ofNullable(this.distance);
    }

    /**
     * The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
     * 
     */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The name of the static route.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the static route.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network subnet address.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network subnet address.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The next hop of the static route (only valid for `nexthop-route` type).
     * 
     */
    @Import(name="nextHop")
    private @Nullable Output<String> nextHop;

    /**
     * @return The next hop of the static route (only valid for `nexthop-route` type).
     * 
     */
    public Optional<Output<String>> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }

    /**
     * The name of the site to associate the static route with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the static route with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private StaticRouteState() {}

    private StaticRouteState(StaticRouteState $) {
        this.distance = $.distance;
        this.interface_ = $.interface_;
        this.name = $.name;
        this.network = $.network;
        this.nextHop = $.nextHop;
        this.site = $.site;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticRouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticRouteState $;

        public Builder() {
            $ = new StaticRouteState();
        }

        public Builder(StaticRouteState defaults) {
            $ = new StaticRouteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param distance The distance of the static route.
         * 
         * @return builder
         * 
         */
        public Builder distance(@Nullable Output<Integer> distance) {
            $.distance = distance;
            return this;
        }

        /**
         * @param distance The distance of the static route.
         * 
         * @return builder
         * 
         */
        public Builder distance(Integer distance) {
            return distance(Output.of(distance));
        }

        /**
         * @param interface_ The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param name The name of the static route.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the static route.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The network subnet address.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network subnet address.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param nextHop The next hop of the static route (only valid for `nexthop-route` type).
         * 
         * @return builder
         * 
         */
        public Builder nextHop(@Nullable Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop The next hop of the static route (only valid for `nexthop-route` type).
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param site The name of the site to associate the static route with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the static route with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param type The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StaticRouteState build() {
            return $;
        }
    }

}
