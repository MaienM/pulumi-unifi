// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.unifi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
     * API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
     * 
     */
    @Import(name="allowInsecure", json=true)
    private @Nullable Output<Boolean> allowInsecure;

    /**
     * @return Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
     * API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
     * 
     */
    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    /**
     * URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
     * path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
     * standard controller paths.
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
     * path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
     * standard controller paths.
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
     * Default: `default`
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
     * Default: `default`
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.allowInsecure = $.allowInsecure;
        this.apiUrl = $.apiUrl;
        this.password = $.password;
        this.site = $.site;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInsecure Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
         * API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        /**
         * @param allowInsecure Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
         * API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        /**
         * @param apiUrl URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
         * path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
         * standard controller paths.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
         * path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
         * standard controller paths.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param password Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param site The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
         * Default: `default`
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
         * Default: `default`
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param username Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderArgs build() {
            $.allowInsecure = Codegen.booleanProp("allowInsecure").output().arg($.allowInsecure).env("UNIFI_INSECURE").getNullable();
            $.apiUrl = Codegen.stringProp("apiUrl").output().arg($.apiUrl).env("UNIFI_API").getNullable();
            $.password = Codegen.stringProp("password").output().arg($.password).env("UNIFI_PASSWORD").getNullable();
            $.site = Codegen.stringProp("site").output().arg($.site).env("UNIFI_SITE").getNullable();
            $.username = Codegen.stringProp("username").output().arg($.username).env("UNIFI_USERNAME").getNullable();
            return $;
        }
    }

}
