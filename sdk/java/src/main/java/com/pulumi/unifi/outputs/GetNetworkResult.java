// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.unifi.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkResult {
    /**
     * @return IPv4 addresses for the DNS server to be returned from the DHCP server.
     * 
     */
    private List<String> dhcpDns;
    /**
     * @return whether DHCP is enabled or not on this network.
     * 
     */
    private Boolean dhcpEnabled;
    /**
     * @return lease time for DHCP addresses.
     * 
     */
    private Integer dhcpLease;
    /**
     * @return The IPv4 address where the DHCP range of addresses starts.
     * 
     */
    private String dhcpStart;
    /**
     * @return The IPv4 address where the DHCP range of addresses stops.
     * 
     */
    private String dhcpStop;
    /**
     * @return Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.
     * 
     */
    private Boolean dhcpdBootEnabled;
    /**
     * @return the file to PXE boot from on the dhcpd*boot*server.
     * 
     */
    private String dhcpdBootFilename;
    /**
     * @return IPv4 address of a TFTP server to network boot from.
     * 
     */
    private String dhcpdBootServer;
    /**
     * @return The domain name of this network.
     * 
     */
    private String domainName;
    /**
     * @return The ID of the network.
     * 
     */
    private String id;
    /**
     * @return Specifies whether IGMP snooping is enabled or not.
     * 
     */
    private Boolean igmpSnooping;
    /**
     * @return Specifies which type of IPv6 connection to use.
     * 
     */
    private String ipv6InterfaceType;
    /**
     * @return Specifies which WAN interface is used for IPv6 Prefix Delegation.
     * 
     */
    private String ipv6PdInterface;
    /**
     * @return Specifies the IPv6 Prefix ID.
     * 
     */
    private String ipv6PdPrefixid;
    /**
     * @return Specifies whether to enable router advertisements or not.
     * 
     */
    private Boolean ipv6RaEnable;
    /**
     * @return Specifies the static IPv6 subnet (when ipv6*interface*type is &#39;static&#39;).
     * 
     */
    private String ipv6StaticSubnet;
    /**
     * @return The name of the network.
     * 
     */
    private String name;
    /**
     * @return The group of the network.
     * 
     */
    private String networkGroup;
    /**
     * @return The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.
     * 
     */
    private String purpose;
    /**
     * @return The name of the site to associate the network with.
     * 
     */
    private String site;
    /**
     * @return The subnet of the network (CIDR address).
     * 
     */
    private String subnet;
    /**
     * @return The VLAN ID of the network.
     * 
     */
    private Integer vlanId;
    /**
     * @return DNS servers IPs of the WAN.
     * 
     */
    private List<String> wanDns;
    /**
     * @return Specifies the WAN egress quality of service.
     * 
     */
    private Integer wanEgressQos;
    /**
     * @return The IPv4 gateway of the WAN.
     * 
     */
    private String wanGateway;
    /**
     * @return The IPv4 address of the WAN.
     * 
     */
    private String wanIp;
    /**
     * @return The IPv4 netmask of the WAN.
     * 
     */
    private String wanNetmask;
    /**
     * @return Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     * 
     */
    private String wanNetworkgroup;
    /**
     * @return Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.
     * 
     */
    private String wanType;
    /**
     * @return Specifies the IPV4 WAN username.
     * 
     */
    private String wanUsername;
    /**
     * @return Specifies the IPV4 WAN password.
     * 
     */
    private String xWanPassword;

    private GetNetworkResult() {}
    /**
     * @return IPv4 addresses for the DNS server to be returned from the DHCP server.
     * 
     */
    public List<String> dhcpDns() {
        return this.dhcpDns;
    }
    /**
     * @return whether DHCP is enabled or not on this network.
     * 
     */
    public Boolean dhcpEnabled() {
        return this.dhcpEnabled;
    }
    /**
     * @return lease time for DHCP addresses.
     * 
     */
    public Integer dhcpLease() {
        return this.dhcpLease;
    }
    /**
     * @return The IPv4 address where the DHCP range of addresses starts.
     * 
     */
    public String dhcpStart() {
        return this.dhcpStart;
    }
    /**
     * @return The IPv4 address where the DHCP range of addresses stops.
     * 
     */
    public String dhcpStop() {
        return this.dhcpStop;
    }
    /**
     * @return Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.
     * 
     */
    public Boolean dhcpdBootEnabled() {
        return this.dhcpdBootEnabled;
    }
    /**
     * @return the file to PXE boot from on the dhcpd*boot*server.
     * 
     */
    public String dhcpdBootFilename() {
        return this.dhcpdBootFilename;
    }
    /**
     * @return IPv4 address of a TFTP server to network boot from.
     * 
     */
    public String dhcpdBootServer() {
        return this.dhcpdBootServer;
    }
    /**
     * @return The domain name of this network.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The ID of the network.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether IGMP snooping is enabled or not.
     * 
     */
    public Boolean igmpSnooping() {
        return this.igmpSnooping;
    }
    /**
     * @return Specifies which type of IPv6 connection to use.
     * 
     */
    public String ipv6InterfaceType() {
        return this.ipv6InterfaceType;
    }
    /**
     * @return Specifies which WAN interface is used for IPv6 Prefix Delegation.
     * 
     */
    public String ipv6PdInterface() {
        return this.ipv6PdInterface;
    }
    /**
     * @return Specifies the IPv6 Prefix ID.
     * 
     */
    public String ipv6PdPrefixid() {
        return this.ipv6PdPrefixid;
    }
    /**
     * @return Specifies whether to enable router advertisements or not.
     * 
     */
    public Boolean ipv6RaEnable() {
        return this.ipv6RaEnable;
    }
    /**
     * @return Specifies the static IPv6 subnet (when ipv6*interface*type is &#39;static&#39;).
     * 
     */
    public String ipv6StaticSubnet() {
        return this.ipv6StaticSubnet;
    }
    /**
     * @return The name of the network.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The group of the network.
     * 
     */
    public String networkGroup() {
        return this.networkGroup;
    }
    /**
     * @return The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return The name of the site to associate the network with.
     * 
     */
    public String site() {
        return this.site;
    }
    /**
     * @return The subnet of the network (CIDR address).
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return The VLAN ID of the network.
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }
    /**
     * @return DNS servers IPs of the WAN.
     * 
     */
    public List<String> wanDns() {
        return this.wanDns;
    }
    /**
     * @return Specifies the WAN egress quality of service.
     * 
     */
    public Integer wanEgressQos() {
        return this.wanEgressQos;
    }
    /**
     * @return The IPv4 gateway of the WAN.
     * 
     */
    public String wanGateway() {
        return this.wanGateway;
    }
    /**
     * @return The IPv4 address of the WAN.
     * 
     */
    public String wanIp() {
        return this.wanIp;
    }
    /**
     * @return The IPv4 netmask of the WAN.
     * 
     */
    public String wanNetmask() {
        return this.wanNetmask;
    }
    /**
     * @return Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     * 
     */
    public String wanNetworkgroup() {
        return this.wanNetworkgroup;
    }
    /**
     * @return Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.
     * 
     */
    public String wanType() {
        return this.wanType;
    }
    /**
     * @return Specifies the IPV4 WAN username.
     * 
     */
    public String wanUsername() {
        return this.wanUsername;
    }
    /**
     * @return Specifies the IPV4 WAN password.
     * 
     */
    public String xWanPassword() {
        return this.xWanPassword;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dhcpDns;
        private Boolean dhcpEnabled;
        private Integer dhcpLease;
        private String dhcpStart;
        private String dhcpStop;
        private Boolean dhcpdBootEnabled;
        private String dhcpdBootFilename;
        private String dhcpdBootServer;
        private String domainName;
        private String id;
        private Boolean igmpSnooping;
        private String ipv6InterfaceType;
        private String ipv6PdInterface;
        private String ipv6PdPrefixid;
        private Boolean ipv6RaEnable;
        private String ipv6StaticSubnet;
        private String name;
        private String networkGroup;
        private String purpose;
        private String site;
        private String subnet;
        private Integer vlanId;
        private List<String> wanDns;
        private Integer wanEgressQos;
        private String wanGateway;
        private String wanIp;
        private String wanNetmask;
        private String wanNetworkgroup;
        private String wanType;
        private String wanUsername;
        private String xWanPassword;
        public Builder() {}
        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpDns = defaults.dhcpDns;
    	      this.dhcpEnabled = defaults.dhcpEnabled;
    	      this.dhcpLease = defaults.dhcpLease;
    	      this.dhcpStart = defaults.dhcpStart;
    	      this.dhcpStop = defaults.dhcpStop;
    	      this.dhcpdBootEnabled = defaults.dhcpdBootEnabled;
    	      this.dhcpdBootFilename = defaults.dhcpdBootFilename;
    	      this.dhcpdBootServer = defaults.dhcpdBootServer;
    	      this.domainName = defaults.domainName;
    	      this.id = defaults.id;
    	      this.igmpSnooping = defaults.igmpSnooping;
    	      this.ipv6InterfaceType = defaults.ipv6InterfaceType;
    	      this.ipv6PdInterface = defaults.ipv6PdInterface;
    	      this.ipv6PdPrefixid = defaults.ipv6PdPrefixid;
    	      this.ipv6RaEnable = defaults.ipv6RaEnable;
    	      this.ipv6StaticSubnet = defaults.ipv6StaticSubnet;
    	      this.name = defaults.name;
    	      this.networkGroup = defaults.networkGroup;
    	      this.purpose = defaults.purpose;
    	      this.site = defaults.site;
    	      this.subnet = defaults.subnet;
    	      this.vlanId = defaults.vlanId;
    	      this.wanDns = defaults.wanDns;
    	      this.wanEgressQos = defaults.wanEgressQos;
    	      this.wanGateway = defaults.wanGateway;
    	      this.wanIp = defaults.wanIp;
    	      this.wanNetmask = defaults.wanNetmask;
    	      this.wanNetworkgroup = defaults.wanNetworkgroup;
    	      this.wanType = defaults.wanType;
    	      this.wanUsername = defaults.wanUsername;
    	      this.xWanPassword = defaults.xWanPassword;
        }

        @CustomType.Setter
        public Builder dhcpDns(List<String> dhcpDns) {
            this.dhcpDns = Objects.requireNonNull(dhcpDns);
            return this;
        }
        public Builder dhcpDns(String... dhcpDns) {
            return dhcpDns(List.of(dhcpDns));
        }
        @CustomType.Setter
        public Builder dhcpEnabled(Boolean dhcpEnabled) {
            this.dhcpEnabled = Objects.requireNonNull(dhcpEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpLease(Integer dhcpLease) {
            this.dhcpLease = Objects.requireNonNull(dhcpLease);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpStart(String dhcpStart) {
            this.dhcpStart = Objects.requireNonNull(dhcpStart);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpStop(String dhcpStop) {
            this.dhcpStop = Objects.requireNonNull(dhcpStop);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpdBootEnabled(Boolean dhcpdBootEnabled) {
            this.dhcpdBootEnabled = Objects.requireNonNull(dhcpdBootEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpdBootFilename(String dhcpdBootFilename) {
            this.dhcpdBootFilename = Objects.requireNonNull(dhcpdBootFilename);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpdBootServer(String dhcpdBootServer) {
            this.dhcpdBootServer = Objects.requireNonNull(dhcpdBootServer);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder igmpSnooping(Boolean igmpSnooping) {
            this.igmpSnooping = Objects.requireNonNull(igmpSnooping);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6InterfaceType(String ipv6InterfaceType) {
            this.ipv6InterfaceType = Objects.requireNonNull(ipv6InterfaceType);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6PdInterface(String ipv6PdInterface) {
            this.ipv6PdInterface = Objects.requireNonNull(ipv6PdInterface);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6PdPrefixid(String ipv6PdPrefixid) {
            this.ipv6PdPrefixid = Objects.requireNonNull(ipv6PdPrefixid);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6RaEnable(Boolean ipv6RaEnable) {
            this.ipv6RaEnable = Objects.requireNonNull(ipv6RaEnable);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6StaticSubnet(String ipv6StaticSubnet) {
            this.ipv6StaticSubnet = Objects.requireNonNull(ipv6StaticSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkGroup(String networkGroup) {
            this.networkGroup = Objects.requireNonNull(networkGroup);
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }
        @CustomType.Setter
        public Builder site(String site) {
            this.site = Objects.requireNonNull(site);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            this.vlanId = Objects.requireNonNull(vlanId);
            return this;
        }
        @CustomType.Setter
        public Builder wanDns(List<String> wanDns) {
            this.wanDns = Objects.requireNonNull(wanDns);
            return this;
        }
        public Builder wanDns(String... wanDns) {
            return wanDns(List.of(wanDns));
        }
        @CustomType.Setter
        public Builder wanEgressQos(Integer wanEgressQos) {
            this.wanEgressQos = Objects.requireNonNull(wanEgressQos);
            return this;
        }
        @CustomType.Setter
        public Builder wanGateway(String wanGateway) {
            this.wanGateway = Objects.requireNonNull(wanGateway);
            return this;
        }
        @CustomType.Setter
        public Builder wanIp(String wanIp) {
            this.wanIp = Objects.requireNonNull(wanIp);
            return this;
        }
        @CustomType.Setter
        public Builder wanNetmask(String wanNetmask) {
            this.wanNetmask = Objects.requireNonNull(wanNetmask);
            return this;
        }
        @CustomType.Setter
        public Builder wanNetworkgroup(String wanNetworkgroup) {
            this.wanNetworkgroup = Objects.requireNonNull(wanNetworkgroup);
            return this;
        }
        @CustomType.Setter
        public Builder wanType(String wanType) {
            this.wanType = Objects.requireNonNull(wanType);
            return this;
        }
        @CustomType.Setter
        public Builder wanUsername(String wanUsername) {
            this.wanUsername = Objects.requireNonNull(wanUsername);
            return this;
        }
        @CustomType.Setter
        public Builder xWanPassword(String xWanPassword) {
            this.xWanPassword = Objects.requireNonNull(xWanPassword);
            return this;
        }
        public GetNetworkResult build() {
            final var o = new GetNetworkResult();
            o.dhcpDns = dhcpDns;
            o.dhcpEnabled = dhcpEnabled;
            o.dhcpLease = dhcpLease;
            o.dhcpStart = dhcpStart;
            o.dhcpStop = dhcpStop;
            o.dhcpdBootEnabled = dhcpdBootEnabled;
            o.dhcpdBootFilename = dhcpdBootFilename;
            o.dhcpdBootServer = dhcpdBootServer;
            o.domainName = domainName;
            o.id = id;
            o.igmpSnooping = igmpSnooping;
            o.ipv6InterfaceType = ipv6InterfaceType;
            o.ipv6PdInterface = ipv6PdInterface;
            o.ipv6PdPrefixid = ipv6PdPrefixid;
            o.ipv6RaEnable = ipv6RaEnable;
            o.ipv6StaticSubnet = ipv6StaticSubnet;
            o.name = name;
            o.networkGroup = networkGroup;
            o.purpose = purpose;
            o.site = site;
            o.subnet = subnet;
            o.vlanId = vlanId;
            o.wanDns = wanDns;
            o.wanEgressQos = wanEgressQos;
            o.wanGateway = wanGateway;
            o.wanIp = wanIp;
            o.wanNetmask = wanNetmask;
            o.wanNetworkgroup = wanNetworkgroup;
            o.wanType = wanType;
            o.wanUsername = wanUsername;
            o.xWanPassword = xWanPassword;
            return o;
        }
    }
}
