// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.unifi.port.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileState Empty = new ProfileState();

    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     * 
     */
    @Import(name="autoneg")
    private @Nullable Output<Boolean> autoneg;

    /**
     * @return Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> autoneg() {
        return Optional.ofNullable(this.autoneg);
    }

    /**
     * The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
     * 
     */
    @Import(name="dot1xCtrl")
    private @Nullable Output<String> dot1xCtrl;

    /**
     * @return The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
     * 
     */
    public Optional<Output<String>> dot1xCtrl() {
        return Optional.ofNullable(this.dot1xCtrl);
    }

    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     * 
     */
    @Import(name="dot1xIdleTimeout")
    private @Nullable Output<Integer> dot1xIdleTimeout;

    /**
     * @return The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     * 
     */
    public Optional<Output<Integer>> dot1xIdleTimeout() {
        return Optional.ofNullable(this.dot1xIdleTimeout);
    }

    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     * 
     */
    @Import(name="egressRateLimitKbps")
    private @Nullable Output<Integer> egressRateLimitKbps;

    /**
     * @return The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     * 
     */
    public Optional<Output<Integer>> egressRateLimitKbps() {
        return Optional.ofNullable(this.egressRateLimitKbps);
    }

    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="egressRateLimitKbpsEnabled")
    private @Nullable Output<Boolean> egressRateLimitKbpsEnabled;

    /**
     * @return Enable egress rate limiting for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> egressRateLimitKbpsEnabled() {
        return Optional.ofNullable(this.egressRateLimitKbpsEnabled);
    }

    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     * 
     */
    @Import(name="forward")
    private @Nullable Output<String> forward;

    /**
     * @return The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     * 
     */
    public Optional<Output<String>> forward() {
        return Optional.ofNullable(this.forward);
    }

    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="fullDuplex")
    private @Nullable Output<Boolean> fullDuplex;

    /**
     * @return Enable full duplex for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> fullDuplex() {
        return Optional.ofNullable(this.fullDuplex);
    }

    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="isolation")
    private @Nullable Output<Boolean> isolation;

    /**
     * @return Enable port isolation for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> isolation() {
        return Optional.ofNullable(this.isolation);
    }

    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     * 
     */
    @Import(name="lldpmedEnabled")
    private @Nullable Output<Boolean> lldpmedEnabled;

    /**
     * @return Enable LLDP-MED for the port profile. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> lldpmedEnabled() {
        return Optional.ofNullable(this.lldpmedEnabled);
    }

    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     * 
     */
    @Import(name="lldpmedNotifyEnabled")
    private @Nullable Output<Boolean> lldpmedNotifyEnabled;

    /**
     * @return Enable LLDP-MED topology change notifications for the port profile.
     * 
     */
    public Optional<Output<Boolean>> lldpmedNotifyEnabled() {
        return Optional.ofNullable(this.lldpmedNotifyEnabled);
    }

    /**
     * The name of the port profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the port profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of network to use as the main network on the port profile.
     * 
     */
    @Import(name="nativeNetworkconfId")
    private @Nullable Output<String> nativeNetworkconfId;

    /**
     * @return The ID of network to use as the main network on the port profile.
     * 
     */
    public Optional<Output<String>> nativeNetworkconfId() {
        return Optional.ofNullable(this.nativeNetworkconfId);
    }

    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     * 
     */
    @Import(name="opMode")
    private @Nullable Output<String> opMode;

    /**
     * @return The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     * 
     */
    public Optional<Output<String>> opMode() {
        return Optional.ofNullable(this.opMode);
    }

    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     * 
     */
    @Import(name="poeMode")
    private @Nullable Output<String> poeMode;

    /**
     * @return The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     * 
     */
    public Optional<Output<String>> poeMode() {
        return Optional.ofNullable(this.poeMode);
    }

    /**
     * Enable port security for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="portSecurityEnabled")
    private @Nullable Output<Boolean> portSecurityEnabled;

    /**
     * @return Enable port security for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> portSecurityEnabled() {
        return Optional.ofNullable(this.portSecurityEnabled);
    }

    /**
     * The MAC addresses associated with the port security for the port profile.
     * 
     */
    @Import(name="portSecurityMacAddresses")
    private @Nullable Output<List<String>> portSecurityMacAddresses;

    /**
     * @return The MAC addresses associated with the port security for the port profile.
     * 
     */
    public Optional<Output<List<String>>> portSecurityMacAddresses() {
        return Optional.ofNullable(this.portSecurityMacAddresses);
    }

    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="priorityQueue1Level")
    private @Nullable Output<Integer> priorityQueue1Level;

    /**
     * @return The priority queue 1 level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> priorityQueue1Level() {
        return Optional.ofNullable(this.priorityQueue1Level);
    }

    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="priorityQueue2Level")
    private @Nullable Output<Integer> priorityQueue2Level;

    /**
     * @return The priority queue 2 level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> priorityQueue2Level() {
        return Optional.ofNullable(this.priorityQueue2Level);
    }

    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="priorityQueue3Level")
    private @Nullable Output<Integer> priorityQueue3Level;

    /**
     * @return The priority queue 3 level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> priorityQueue3Level() {
        return Optional.ofNullable(this.priorityQueue3Level);
    }

    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="priorityQueue4Level")
    private @Nullable Output<Integer> priorityQueue4Level;

    /**
     * @return The priority queue 4 level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> priorityQueue4Level() {
        return Optional.ofNullable(this.priorityQueue4Level);
    }

    /**
     * The name of the site to associate the port profile with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the port profile with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     * 
     */
    @Import(name="speed")
    private @Nullable Output<Integer> speed;

    /**
     * @return The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     * 
     */
    public Optional<Output<Integer>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="stormctrlBcastEnabled")
    private @Nullable Output<Boolean> stormctrlBcastEnabled;

    /**
     * @return Enable broadcast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> stormctrlBcastEnabled() {
        return Optional.ofNullable(this.stormctrlBcastEnabled);
    }

    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="stormctrlBcastLevel")
    private @Nullable Output<Integer> stormctrlBcastLevel;

    /**
     * @return The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> stormctrlBcastLevel() {
        return Optional.ofNullable(this.stormctrlBcastLevel);
    }

    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    @Import(name="stormctrlBcastRate")
    private @Nullable Output<Integer> stormctrlBcastRate;

    /**
     * @return The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    public Optional<Output<Integer>> stormctrlBcastRate() {
        return Optional.ofNullable(this.stormctrlBcastRate);
    }

    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="stormctrlMcastEnabled")
    private @Nullable Output<Boolean> stormctrlMcastEnabled;

    /**
     * @return Enable multicast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> stormctrlMcastEnabled() {
        return Optional.ofNullable(this.stormctrlMcastEnabled);
    }

    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="stormctrlMcastLevel")
    private @Nullable Output<Integer> stormctrlMcastLevel;

    /**
     * @return The multicast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> stormctrlMcastLevel() {
        return Optional.ofNullable(this.stormctrlMcastLevel);
    }

    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    @Import(name="stormctrlMcastRate")
    private @Nullable Output<Integer> stormctrlMcastRate;

    /**
     * @return The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    public Optional<Output<Integer>> stormctrlMcastRate() {
        return Optional.ofNullable(this.stormctrlMcastRate);
    }

    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     * 
     */
    @Import(name="stormctrlType")
    private @Nullable Output<String> stormctrlType;

    /**
     * @return The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     * 
     */
    public Optional<Output<String>> stormctrlType() {
        return Optional.ofNullable(this.stormctrlType);
    }

    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    @Import(name="stormctrlUcastEnabled")
    private @Nullable Output<Boolean> stormctrlUcastEnabled;

    /**
     * @return Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> stormctrlUcastEnabled() {
        return Optional.ofNullable(this.stormctrlUcastEnabled);
    }

    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    @Import(name="stormctrlUcastLevel")
    private @Nullable Output<Integer> stormctrlUcastLevel;

    /**
     * @return The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> stormctrlUcastLevel() {
        return Optional.ofNullable(this.stormctrlUcastLevel);
    }

    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    @Import(name="stormctrlUcastRate")
    private @Nullable Output<Integer> stormctrlUcastRate;

    /**
     * @return The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     * 
     */
    public Optional<Output<Integer>> stormctrlUcastRate() {
        return Optional.ofNullable(this.stormctrlUcastRate);
    }

    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     * 
     */
    @Import(name="stpPortMode")
    private @Nullable Output<Boolean> stpPortMode;

    /**
     * @return Enable spanning tree protocol on the port profile. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> stpPortMode() {
        return Optional.ofNullable(this.stpPortMode);
    }

    /**
     * The IDs of networks to tag traffic with for the port profile.
     * 
     */
    @Import(name="taggedNetworkconfIds")
    private @Nullable Output<List<String>> taggedNetworkconfIds;

    /**
     * @return The IDs of networks to tag traffic with for the port profile.
     * 
     */
    public Optional<Output<List<String>>> taggedNetworkconfIds() {
        return Optional.ofNullable(this.taggedNetworkconfIds);
    }

    /**
     * The ID of network to use as the voice network on the port profile.
     * 
     */
    @Import(name="voiceNetworkconfId")
    private @Nullable Output<String> voiceNetworkconfId;

    /**
     * @return The ID of network to use as the voice network on the port profile.
     * 
     */
    public Optional<Output<String>> voiceNetworkconfId() {
        return Optional.ofNullable(this.voiceNetworkconfId);
    }

    private ProfileState() {}

    private ProfileState(ProfileState $) {
        this.autoneg = $.autoneg;
        this.dot1xCtrl = $.dot1xCtrl;
        this.dot1xIdleTimeout = $.dot1xIdleTimeout;
        this.egressRateLimitKbps = $.egressRateLimitKbps;
        this.egressRateLimitKbpsEnabled = $.egressRateLimitKbpsEnabled;
        this.forward = $.forward;
        this.fullDuplex = $.fullDuplex;
        this.isolation = $.isolation;
        this.lldpmedEnabled = $.lldpmedEnabled;
        this.lldpmedNotifyEnabled = $.lldpmedNotifyEnabled;
        this.name = $.name;
        this.nativeNetworkconfId = $.nativeNetworkconfId;
        this.opMode = $.opMode;
        this.poeMode = $.poeMode;
        this.portSecurityEnabled = $.portSecurityEnabled;
        this.portSecurityMacAddresses = $.portSecurityMacAddresses;
        this.priorityQueue1Level = $.priorityQueue1Level;
        this.priorityQueue2Level = $.priorityQueue2Level;
        this.priorityQueue3Level = $.priorityQueue3Level;
        this.priorityQueue4Level = $.priorityQueue4Level;
        this.site = $.site;
        this.speed = $.speed;
        this.stormctrlBcastEnabled = $.stormctrlBcastEnabled;
        this.stormctrlBcastLevel = $.stormctrlBcastLevel;
        this.stormctrlBcastRate = $.stormctrlBcastRate;
        this.stormctrlMcastEnabled = $.stormctrlMcastEnabled;
        this.stormctrlMcastLevel = $.stormctrlMcastLevel;
        this.stormctrlMcastRate = $.stormctrlMcastRate;
        this.stormctrlType = $.stormctrlType;
        this.stormctrlUcastEnabled = $.stormctrlUcastEnabled;
        this.stormctrlUcastLevel = $.stormctrlUcastLevel;
        this.stormctrlUcastRate = $.stormctrlUcastRate;
        this.stpPortMode = $.stpPortMode;
        this.taggedNetworkconfIds = $.taggedNetworkconfIds;
        this.voiceNetworkconfId = $.voiceNetworkconfId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileState $;

        public Builder() {
            $ = new ProfileState();
        }

        public Builder(ProfileState defaults) {
            $ = new ProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoneg Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoneg(@Nullable Output<Boolean> autoneg) {
            $.autoneg = autoneg;
            return this;
        }

        /**
         * @param autoneg Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoneg(Boolean autoneg) {
            return autoneg(Output.of(autoneg));
        }

        /**
         * @param dot1xCtrl The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
         * 
         * @return builder
         * 
         */
        public Builder dot1xCtrl(@Nullable Output<String> dot1xCtrl) {
            $.dot1xCtrl = dot1xCtrl;
            return this;
        }

        /**
         * @param dot1xCtrl The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
         * 
         * @return builder
         * 
         */
        public Builder dot1xCtrl(String dot1xCtrl) {
            return dot1xCtrl(Output.of(dot1xCtrl));
        }

        /**
         * @param dot1xIdleTimeout The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder dot1xIdleTimeout(@Nullable Output<Integer> dot1xIdleTimeout) {
            $.dot1xIdleTimeout = dot1xIdleTimeout;
            return this;
        }

        /**
         * @param dot1xIdleTimeout The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder dot1xIdleTimeout(Integer dot1xIdleTimeout) {
            return dot1xIdleTimeout(Output.of(dot1xIdleTimeout));
        }

        /**
         * @param egressRateLimitKbps The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
         * 
         * @return builder
         * 
         */
        public Builder egressRateLimitKbps(@Nullable Output<Integer> egressRateLimitKbps) {
            $.egressRateLimitKbps = egressRateLimitKbps;
            return this;
        }

        /**
         * @param egressRateLimitKbps The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
         * 
         * @return builder
         * 
         */
        public Builder egressRateLimitKbps(Integer egressRateLimitKbps) {
            return egressRateLimitKbps(Output.of(egressRateLimitKbps));
        }

        /**
         * @param egressRateLimitKbpsEnabled Enable egress rate limiting for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder egressRateLimitKbpsEnabled(@Nullable Output<Boolean> egressRateLimitKbpsEnabled) {
            $.egressRateLimitKbpsEnabled = egressRateLimitKbpsEnabled;
            return this;
        }

        /**
         * @param egressRateLimitKbpsEnabled Enable egress rate limiting for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder egressRateLimitKbpsEnabled(Boolean egressRateLimitKbpsEnabled) {
            return egressRateLimitKbpsEnabled(Output.of(egressRateLimitKbpsEnabled));
        }

        /**
         * @param forward The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
         * 
         * @return builder
         * 
         */
        public Builder forward(@Nullable Output<String> forward) {
            $.forward = forward;
            return this;
        }

        /**
         * @param forward The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
         * 
         * @return builder
         * 
         */
        public Builder forward(String forward) {
            return forward(Output.of(forward));
        }

        /**
         * @param fullDuplex Enable full duplex for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder fullDuplex(@Nullable Output<Boolean> fullDuplex) {
            $.fullDuplex = fullDuplex;
            return this;
        }

        /**
         * @param fullDuplex Enable full duplex for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder fullDuplex(Boolean fullDuplex) {
            return fullDuplex(Output.of(fullDuplex));
        }

        /**
         * @param isolation Enable port isolation for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isolation(@Nullable Output<Boolean> isolation) {
            $.isolation = isolation;
            return this;
        }

        /**
         * @param isolation Enable port isolation for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isolation(Boolean isolation) {
            return isolation(Output.of(isolation));
        }

        /**
         * @param lldpmedEnabled Enable LLDP-MED for the port profile. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder lldpmedEnabled(@Nullable Output<Boolean> lldpmedEnabled) {
            $.lldpmedEnabled = lldpmedEnabled;
            return this;
        }

        /**
         * @param lldpmedEnabled Enable LLDP-MED for the port profile. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder lldpmedEnabled(Boolean lldpmedEnabled) {
            return lldpmedEnabled(Output.of(lldpmedEnabled));
        }

        /**
         * @param lldpmedNotifyEnabled Enable LLDP-MED topology change notifications for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder lldpmedNotifyEnabled(@Nullable Output<Boolean> lldpmedNotifyEnabled) {
            $.lldpmedNotifyEnabled = lldpmedNotifyEnabled;
            return this;
        }

        /**
         * @param lldpmedNotifyEnabled Enable LLDP-MED topology change notifications for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder lldpmedNotifyEnabled(Boolean lldpmedNotifyEnabled) {
            return lldpmedNotifyEnabled(Output.of(lldpmedNotifyEnabled));
        }

        /**
         * @param name The name of the port profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the port profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nativeNetworkconfId The ID of network to use as the main network on the port profile.
         * 
         * @return builder
         * 
         */
        public Builder nativeNetworkconfId(@Nullable Output<String> nativeNetworkconfId) {
            $.nativeNetworkconfId = nativeNetworkconfId;
            return this;
        }

        /**
         * @param nativeNetworkconfId The ID of network to use as the main network on the port profile.
         * 
         * @return builder
         * 
         */
        public Builder nativeNetworkconfId(String nativeNetworkconfId) {
            return nativeNetworkconfId(Output.of(nativeNetworkconfId));
        }

        /**
         * @param opMode The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
         * 
         * @return builder
         * 
         */
        public Builder opMode(@Nullable Output<String> opMode) {
            $.opMode = opMode;
            return this;
        }

        /**
         * @param opMode The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
         * 
         * @return builder
         * 
         */
        public Builder opMode(String opMode) {
            return opMode(Output.of(opMode));
        }

        /**
         * @param poeMode The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
         * 
         * @return builder
         * 
         */
        public Builder poeMode(@Nullable Output<String> poeMode) {
            $.poeMode = poeMode;
            return this;
        }

        /**
         * @param poeMode The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
         * 
         * @return builder
         * 
         */
        public Builder poeMode(String poeMode) {
            return poeMode(Output.of(poeMode));
        }

        /**
         * @param portSecurityEnabled Enable port security for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder portSecurityEnabled(@Nullable Output<Boolean> portSecurityEnabled) {
            $.portSecurityEnabled = portSecurityEnabled;
            return this;
        }

        /**
         * @param portSecurityEnabled Enable port security for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder portSecurityEnabled(Boolean portSecurityEnabled) {
            return portSecurityEnabled(Output.of(portSecurityEnabled));
        }

        /**
         * @param portSecurityMacAddresses The MAC addresses associated with the port security for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder portSecurityMacAddresses(@Nullable Output<List<String>> portSecurityMacAddresses) {
            $.portSecurityMacAddresses = portSecurityMacAddresses;
            return this;
        }

        /**
         * @param portSecurityMacAddresses The MAC addresses associated with the port security for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder portSecurityMacAddresses(List<String> portSecurityMacAddresses) {
            return portSecurityMacAddresses(Output.of(portSecurityMacAddresses));
        }

        /**
         * @param portSecurityMacAddresses The MAC addresses associated with the port security for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder portSecurityMacAddresses(String... portSecurityMacAddresses) {
            return portSecurityMacAddresses(List.of(portSecurityMacAddresses));
        }

        /**
         * @param priorityQueue1Level The priority queue 1 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue1Level(@Nullable Output<Integer> priorityQueue1Level) {
            $.priorityQueue1Level = priorityQueue1Level;
            return this;
        }

        /**
         * @param priorityQueue1Level The priority queue 1 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue1Level(Integer priorityQueue1Level) {
            return priorityQueue1Level(Output.of(priorityQueue1Level));
        }

        /**
         * @param priorityQueue2Level The priority queue 2 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue2Level(@Nullable Output<Integer> priorityQueue2Level) {
            $.priorityQueue2Level = priorityQueue2Level;
            return this;
        }

        /**
         * @param priorityQueue2Level The priority queue 2 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue2Level(Integer priorityQueue2Level) {
            return priorityQueue2Level(Output.of(priorityQueue2Level));
        }

        /**
         * @param priorityQueue3Level The priority queue 3 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue3Level(@Nullable Output<Integer> priorityQueue3Level) {
            $.priorityQueue3Level = priorityQueue3Level;
            return this;
        }

        /**
         * @param priorityQueue3Level The priority queue 3 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue3Level(Integer priorityQueue3Level) {
            return priorityQueue3Level(Output.of(priorityQueue3Level));
        }

        /**
         * @param priorityQueue4Level The priority queue 4 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue4Level(@Nullable Output<Integer> priorityQueue4Level) {
            $.priorityQueue4Level = priorityQueue4Level;
            return this;
        }

        /**
         * @param priorityQueue4Level The priority queue 4 level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder priorityQueue4Level(Integer priorityQueue4Level) {
            return priorityQueue4Level(Output.of(priorityQueue4Level));
        }

        /**
         * @param site The name of the site to associate the port profile with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the port profile with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param speed The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
         * 
         * @return builder
         * 
         */
        public Builder speed(@Nullable Output<Integer> speed) {
            $.speed = speed;
            return this;
        }

        /**
         * @param speed The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
         * 
         * @return builder
         * 
         */
        public Builder speed(Integer speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param stormctrlBcastEnabled Enable broadcast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastEnabled(@Nullable Output<Boolean> stormctrlBcastEnabled) {
            $.stormctrlBcastEnabled = stormctrlBcastEnabled;
            return this;
        }

        /**
         * @param stormctrlBcastEnabled Enable broadcast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastEnabled(Boolean stormctrlBcastEnabled) {
            return stormctrlBcastEnabled(Output.of(stormctrlBcastEnabled));
        }

        /**
         * @param stormctrlBcastLevel The broadcast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastLevel(@Nullable Output<Integer> stormctrlBcastLevel) {
            $.stormctrlBcastLevel = stormctrlBcastLevel;
            return this;
        }

        /**
         * @param stormctrlBcastLevel The broadcast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastLevel(Integer stormctrlBcastLevel) {
            return stormctrlBcastLevel(Output.of(stormctrlBcastLevel));
        }

        /**
         * @param stormctrlBcastRate The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastRate(@Nullable Output<Integer> stormctrlBcastRate) {
            $.stormctrlBcastRate = stormctrlBcastRate;
            return this;
        }

        /**
         * @param stormctrlBcastRate The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlBcastRate(Integer stormctrlBcastRate) {
            return stormctrlBcastRate(Output.of(stormctrlBcastRate));
        }

        /**
         * @param stormctrlMcastEnabled Enable multicast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastEnabled(@Nullable Output<Boolean> stormctrlMcastEnabled) {
            $.stormctrlMcastEnabled = stormctrlMcastEnabled;
            return this;
        }

        /**
         * @param stormctrlMcastEnabled Enable multicast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastEnabled(Boolean stormctrlMcastEnabled) {
            return stormctrlMcastEnabled(Output.of(stormctrlMcastEnabled));
        }

        /**
         * @param stormctrlMcastLevel The multicast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastLevel(@Nullable Output<Integer> stormctrlMcastLevel) {
            $.stormctrlMcastLevel = stormctrlMcastLevel;
            return this;
        }

        /**
         * @param stormctrlMcastLevel The multicast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastLevel(Integer stormctrlMcastLevel) {
            return stormctrlMcastLevel(Output.of(stormctrlMcastLevel));
        }

        /**
         * @param stormctrlMcastRate The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastRate(@Nullable Output<Integer> stormctrlMcastRate) {
            $.stormctrlMcastRate = stormctrlMcastRate;
            return this;
        }

        /**
         * @param stormctrlMcastRate The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlMcastRate(Integer stormctrlMcastRate) {
            return stormctrlMcastRate(Output.of(stormctrlMcastRate));
        }

        /**
         * @param stormctrlType The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlType(@Nullable Output<String> stormctrlType) {
            $.stormctrlType = stormctrlType;
            return this;
        }

        /**
         * @param stormctrlType The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlType(String stormctrlType) {
            return stormctrlType(Output.of(stormctrlType));
        }

        /**
         * @param stormctrlUcastEnabled Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastEnabled(@Nullable Output<Boolean> stormctrlUcastEnabled) {
            $.stormctrlUcastEnabled = stormctrlUcastEnabled;
            return this;
        }

        /**
         * @param stormctrlUcastEnabled Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastEnabled(Boolean stormctrlUcastEnabled) {
            return stormctrlUcastEnabled(Output.of(stormctrlUcastEnabled));
        }

        /**
         * @param stormctrlUcastLevel The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastLevel(@Nullable Output<Integer> stormctrlUcastLevel) {
            $.stormctrlUcastLevel = stormctrlUcastLevel;
            return this;
        }

        /**
         * @param stormctrlUcastLevel The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastLevel(Integer stormctrlUcastLevel) {
            return stormctrlUcastLevel(Output.of(stormctrlUcastLevel));
        }

        /**
         * @param stormctrlUcastRate The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastRate(@Nullable Output<Integer> stormctrlUcastRate) {
            $.stormctrlUcastRate = stormctrlUcastRate;
            return this;
        }

        /**
         * @param stormctrlUcastRate The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
         * 
         * @return builder
         * 
         */
        public Builder stormctrlUcastRate(Integer stormctrlUcastRate) {
            return stormctrlUcastRate(Output.of(stormctrlUcastRate));
        }

        /**
         * @param stpPortMode Enable spanning tree protocol on the port profile. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder stpPortMode(@Nullable Output<Boolean> stpPortMode) {
            $.stpPortMode = stpPortMode;
            return this;
        }

        /**
         * @param stpPortMode Enable spanning tree protocol on the port profile. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder stpPortMode(Boolean stpPortMode) {
            return stpPortMode(Output.of(stpPortMode));
        }

        /**
         * @param taggedNetworkconfIds The IDs of networks to tag traffic with for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder taggedNetworkconfIds(@Nullable Output<List<String>> taggedNetworkconfIds) {
            $.taggedNetworkconfIds = taggedNetworkconfIds;
            return this;
        }

        /**
         * @param taggedNetworkconfIds The IDs of networks to tag traffic with for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder taggedNetworkconfIds(List<String> taggedNetworkconfIds) {
            return taggedNetworkconfIds(Output.of(taggedNetworkconfIds));
        }

        /**
         * @param taggedNetworkconfIds The IDs of networks to tag traffic with for the port profile.
         * 
         * @return builder
         * 
         */
        public Builder taggedNetworkconfIds(String... taggedNetworkconfIds) {
            return taggedNetworkconfIds(List.of(taggedNetworkconfIds));
        }

        /**
         * @param voiceNetworkconfId The ID of network to use as the voice network on the port profile.
         * 
         * @return builder
         * 
         */
        public Builder voiceNetworkconfId(@Nullable Output<String> voiceNetworkconfId) {
            $.voiceNetworkconfId = voiceNetworkconfId;
            return this;
        }

        /**
         * @param voiceNetworkconfId The ID of network to use as the voice network on the port profile.
         * 
         * @return builder
         * 
         */
        public Builder voiceNetworkconfId(String voiceNetworkconfId) {
            return voiceNetworkconfId(Output.of(voiceNetworkconfId));
        }

        public ProfileState build() {
            return $;
        }
    }

}
