// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.unifi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicDNSArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicDNSArgs Empty = new DynamicDNSArgs();

    /**
     * The host name to update in the dynamic DNS service.
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return The host name to update in the dynamic DNS service.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
     * 
     */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Import(name="server")
    private @Nullable Output<String> server;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Optional<Output<String>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * The name of the site to associate the dynamic DNS with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the dynamic DNS with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    private DynamicDNSArgs() {}

    private DynamicDNSArgs(DynamicDNSArgs $) {
        this.hostName = $.hostName;
        this.interface_ = $.interface_;
        this.login = $.login;
        this.password = $.password;
        this.server = $.server;
        this.service = $.service;
        this.site = $.site;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicDNSArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicDNSArgs $;

        public Builder() {
            $ = new DynamicDNSArgs();
        }

        public Builder(DynamicDNSArgs defaults) {
            $ = new DynamicDNSArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostName The host name to update in the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name to update in the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param interface_ The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param login The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param password The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param server The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The server for the dynamic DNS service.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param service The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param site The name of the site to associate the dynamic DNS with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the dynamic DNS with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        public DynamicDNSArgs build() {
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
