// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `UserGroup` manages a user group (called "client group" in the UI), which can be used to limit bandwidth for groups of users.
//
// ## Import
//
// # import using the ID
//
// ```sh
//  $ pulumi import unifi:index/userGroup:UserGroup wifi 5fe6261995fe130013456a36
// ```
type UserGroup struct {
	pulumi.CustomResourceState

	// The name of the user group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The QOS maximum download rate. Defaults to `-1`.
	QosRateMaxDown pulumi.IntPtrOutput `pulumi:"qosRateMaxDown"`
	// The QOS maximum upload rate. Defaults to `-1`.
	QosRateMaxUp pulumi.IntPtrOutput `pulumi:"qosRateMaxUp"`
	// The name of the site to associate the user group with.
	Site pulumi.StringOutput `pulumi:"site"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil {
		args = &UserGroupArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserGroup
	err := ctx.RegisterResource("unifi:index/userGroup:UserGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	var resource UserGroup
	err := ctx.ReadResource("unifi:index/userGroup:UserGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type userGroupState struct {
	// The name of the user group.
	Name *string `pulumi:"name"`
	// The QOS maximum download rate. Defaults to `-1`.
	QosRateMaxDown *int `pulumi:"qosRateMaxDown"`
	// The QOS maximum upload rate. Defaults to `-1`.
	QosRateMaxUp *int `pulumi:"qosRateMaxUp"`
	// The name of the site to associate the user group with.
	Site *string `pulumi:"site"`
}

type UserGroupState struct {
	// The name of the user group.
	Name pulumi.StringPtrInput
	// The QOS maximum download rate. Defaults to `-1`.
	QosRateMaxDown pulumi.IntPtrInput
	// The QOS maximum upload rate. Defaults to `-1`.
	QosRateMaxUp pulumi.IntPtrInput
	// The name of the site to associate the user group with.
	Site pulumi.StringPtrInput
}

func (UserGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupState)(nil)).Elem()
}

type userGroupArgs struct {
	// The name of the user group.
	Name *string `pulumi:"name"`
	// The QOS maximum download rate. Defaults to `-1`.
	QosRateMaxDown *int `pulumi:"qosRateMaxDown"`
	// The QOS maximum upload rate. Defaults to `-1`.
	QosRateMaxUp *int `pulumi:"qosRateMaxUp"`
	// The name of the site to associate the user group with.
	Site *string `pulumi:"site"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The name of the user group.
	Name pulumi.StringPtrInput
	// The QOS maximum download rate. Defaults to `-1`.
	QosRateMaxDown pulumi.IntPtrInput
	// The QOS maximum upload rate. Defaults to `-1`.
	QosRateMaxUp pulumi.IntPtrInput
	// The name of the site to associate the user group with.
	Site pulumi.StringPtrInput
}

func (UserGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupArgs)(nil)).Elem()
}

type UserGroupInput interface {
	pulumi.Input

	ToUserGroupOutput() UserGroupOutput
	ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput
}

func (*UserGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroup)(nil)).Elem()
}

func (i *UserGroup) ToUserGroupOutput() UserGroupOutput {
	return i.ToUserGroupOutputWithContext(context.Background())
}

func (i *UserGroup) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupOutput)
}

// UserGroupArrayInput is an input type that accepts UserGroupArray and UserGroupArrayOutput values.
// You can construct a concrete instance of `UserGroupArrayInput` via:
//
//          UserGroupArray{ UserGroupArgs{...} }
type UserGroupArrayInput interface {
	pulumi.Input

	ToUserGroupArrayOutput() UserGroupArrayOutput
	ToUserGroupArrayOutputWithContext(context.Context) UserGroupArrayOutput
}

type UserGroupArray []UserGroupInput

func (UserGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroup)(nil)).Elem()
}

func (i UserGroupArray) ToUserGroupArrayOutput() UserGroupArrayOutput {
	return i.ToUserGroupArrayOutputWithContext(context.Background())
}

func (i UserGroupArray) ToUserGroupArrayOutputWithContext(ctx context.Context) UserGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupArrayOutput)
}

// UserGroupMapInput is an input type that accepts UserGroupMap and UserGroupMapOutput values.
// You can construct a concrete instance of `UserGroupMapInput` via:
//
//          UserGroupMap{ "key": UserGroupArgs{...} }
type UserGroupMapInput interface {
	pulumi.Input

	ToUserGroupMapOutput() UserGroupMapOutput
	ToUserGroupMapOutputWithContext(context.Context) UserGroupMapOutput
}

type UserGroupMap map[string]UserGroupInput

func (UserGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroup)(nil)).Elem()
}

func (i UserGroupMap) ToUserGroupMapOutput() UserGroupMapOutput {
	return i.ToUserGroupMapOutputWithContext(context.Background())
}

func (i UserGroupMap) ToUserGroupMapOutputWithContext(ctx context.Context) UserGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMapOutput)
}

type UserGroupOutput struct{ *pulumi.OutputState }

func (UserGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroup)(nil)).Elem()
}

func (o UserGroupOutput) ToUserGroupOutput() UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return o
}

// The name of the user group.
func (o UserGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The QOS maximum download rate. Defaults to `-1`.
func (o UserGroupOutput) QosRateMaxDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntPtrOutput { return v.QosRateMaxDown }).(pulumi.IntPtrOutput)
}

// The QOS maximum upload rate. Defaults to `-1`.
func (o UserGroupOutput) QosRateMaxUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.IntPtrOutput { return v.QosRateMaxUp }).(pulumi.IntPtrOutput)
}

// The name of the site to associate the user group with.
func (o UserGroupOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroup) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

type UserGroupArrayOutput struct{ *pulumi.OutputState }

func (UserGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroup)(nil)).Elem()
}

func (o UserGroupArrayOutput) ToUserGroupArrayOutput() UserGroupArrayOutput {
	return o
}

func (o UserGroupArrayOutput) ToUserGroupArrayOutputWithContext(ctx context.Context) UserGroupArrayOutput {
	return o
}

func (o UserGroupArrayOutput) Index(i pulumi.IntInput) UserGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroup {
		return vs[0].([]*UserGroup)[vs[1].(int)]
	}).(UserGroupOutput)
}

type UserGroupMapOutput struct{ *pulumi.OutputState }

func (UserGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroup)(nil)).Elem()
}

func (o UserGroupMapOutput) ToUserGroupMapOutput() UserGroupMapOutput {
	return o
}

func (o UserGroupMapOutput) ToUserGroupMapOutputWithContext(ctx context.Context) UserGroupMapOutput {
	return o
}

func (o UserGroupMapOutput) MapIndex(k pulumi.StringInput) UserGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroup {
		return vs[0].(map[string]*UserGroup)[vs[1].(string)]
	}).(UserGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupInput)(nil)).Elem(), &UserGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupArrayInput)(nil)).Elem(), UserGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMapInput)(nil)).Elem(), UserGroupMap{})
	pulumi.RegisterOutputType(UserGroupOutput{})
	pulumi.RegisterOutputType(UserGroupArrayOutput{})
	pulumi.RegisterOutputType(UserGroupMapOutput{})
}
