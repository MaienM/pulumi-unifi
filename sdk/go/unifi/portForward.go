// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PortForward` manages a port forwarding rule on the gateway.
type PortForward struct {
	pulumi.CustomResourceState

	// The destination port for the forwarding.
	DstPort pulumi.StringPtrOutput `pulumi:"dstPort"`
	// Specifies whether the port forwarding rule is enabled or not. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	//
	// Deprecated: This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The IPv4 address to forward traffic to.
	FwdIp pulumi.StringPtrOutput `pulumi:"fwdIp"`
	// The port to forward traffic to.
	FwdPort pulumi.StringPtrOutput `pulumi:"fwdPort"`
	// Specifies whether to log forwarded traffic or not. Defaults to `false`.
	Log pulumi.BoolPtrOutput `pulumi:"log"`
	// The name of the port forwarding rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
	PortForwardInterface pulumi.StringPtrOutput `pulumi:"portForwardInterface"`
	// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The name of the site to associate the port forwarding rule with.
	Site pulumi.StringOutput `pulumi:"site"`
	// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
	SrcIp pulumi.StringPtrOutput `pulumi:"srcIp"`
}

// NewPortForward registers a new resource with the given unique name, arguments, and options.
func NewPortForward(ctx *pulumi.Context,
	name string, args *PortForwardArgs, opts ...pulumi.ResourceOption) (*PortForward, error) {
	if args == nil {
		args = &PortForwardArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource PortForward
	err := ctx.RegisterResource("unifi:index/portForward:PortForward", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortForward gets an existing PortForward resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortForward(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortForwardState, opts ...pulumi.ResourceOption) (*PortForward, error) {
	var resource PortForward
	err := ctx.ReadResource("unifi:index/portForward:PortForward", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortForward resources.
type portForwardState struct {
	// The destination port for the forwarding.
	DstPort *string `pulumi:"dstPort"`
	// Specifies whether the port forwarding rule is enabled or not. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	//
	// Deprecated: This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	Enabled *bool `pulumi:"enabled"`
	// The IPv4 address to forward traffic to.
	FwdIp *string `pulumi:"fwdIp"`
	// The port to forward traffic to.
	FwdPort *string `pulumi:"fwdPort"`
	// Specifies whether to log forwarded traffic or not. Defaults to `false`.
	Log *bool `pulumi:"log"`
	// The name of the port forwarding rule.
	Name *string `pulumi:"name"`
	// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
	PortForwardInterface *string `pulumi:"portForwardInterface"`
	// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
	Protocol *string `pulumi:"protocol"`
	// The name of the site to associate the port forwarding rule with.
	Site *string `pulumi:"site"`
	// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
	SrcIp *string `pulumi:"srcIp"`
}

type PortForwardState struct {
	// The destination port for the forwarding.
	DstPort pulumi.StringPtrInput
	// Specifies whether the port forwarding rule is enabled or not. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	//
	// Deprecated: This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	Enabled pulumi.BoolPtrInput
	// The IPv4 address to forward traffic to.
	FwdIp pulumi.StringPtrInput
	// The port to forward traffic to.
	FwdPort pulumi.StringPtrInput
	// Specifies whether to log forwarded traffic or not. Defaults to `false`.
	Log pulumi.BoolPtrInput
	// The name of the port forwarding rule.
	Name pulumi.StringPtrInput
	// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
	PortForwardInterface pulumi.StringPtrInput
	// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
	Protocol pulumi.StringPtrInput
	// The name of the site to associate the port forwarding rule with.
	Site pulumi.StringPtrInput
	// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
	SrcIp pulumi.StringPtrInput
}

func (PortForwardState) ElementType() reflect.Type {
	return reflect.TypeOf((*portForwardState)(nil)).Elem()
}

type portForwardArgs struct {
	// The destination port for the forwarding.
	DstPort *string `pulumi:"dstPort"`
	// Specifies whether the port forwarding rule is enabled or not. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	//
	// Deprecated: This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	Enabled *bool `pulumi:"enabled"`
	// The IPv4 address to forward traffic to.
	FwdIp *string `pulumi:"fwdIp"`
	// The port to forward traffic to.
	FwdPort *string `pulumi:"fwdPort"`
	// Specifies whether to log forwarded traffic or not. Defaults to `false`.
	Log *bool `pulumi:"log"`
	// The name of the port forwarding rule.
	Name *string `pulumi:"name"`
	// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
	PortForwardInterface *string `pulumi:"portForwardInterface"`
	// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
	Protocol *string `pulumi:"protocol"`
	// The name of the site to associate the port forwarding rule with.
	Site *string `pulumi:"site"`
	// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
	SrcIp *string `pulumi:"srcIp"`
}

// The set of arguments for constructing a PortForward resource.
type PortForwardArgs struct {
	// The destination port for the forwarding.
	DstPort pulumi.StringPtrInput
	// Specifies whether the port forwarding rule is enabled or not. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	//
	// Deprecated: This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
	Enabled pulumi.BoolPtrInput
	// The IPv4 address to forward traffic to.
	FwdIp pulumi.StringPtrInput
	// The port to forward traffic to.
	FwdPort pulumi.StringPtrInput
	// Specifies whether to log forwarded traffic or not. Defaults to `false`.
	Log pulumi.BoolPtrInput
	// The name of the port forwarding rule.
	Name pulumi.StringPtrInput
	// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
	PortForwardInterface pulumi.StringPtrInput
	// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
	Protocol pulumi.StringPtrInput
	// The name of the site to associate the port forwarding rule with.
	Site pulumi.StringPtrInput
	// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
	SrcIp pulumi.StringPtrInput
}

func (PortForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portForwardArgs)(nil)).Elem()
}

type PortForwardInput interface {
	pulumi.Input

	ToPortForwardOutput() PortForwardOutput
	ToPortForwardOutputWithContext(ctx context.Context) PortForwardOutput
}

func (*PortForward) ElementType() reflect.Type {
	return reflect.TypeOf((**PortForward)(nil)).Elem()
}

func (i *PortForward) ToPortForwardOutput() PortForwardOutput {
	return i.ToPortForwardOutputWithContext(context.Background())
}

func (i *PortForward) ToPortForwardOutputWithContext(ctx context.Context) PortForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortForwardOutput)
}

// PortForwardArrayInput is an input type that accepts PortForwardArray and PortForwardArrayOutput values.
// You can construct a concrete instance of `PortForwardArrayInput` via:
//
//          PortForwardArray{ PortForwardArgs{...} }
type PortForwardArrayInput interface {
	pulumi.Input

	ToPortForwardArrayOutput() PortForwardArrayOutput
	ToPortForwardArrayOutputWithContext(context.Context) PortForwardArrayOutput
}

type PortForwardArray []PortForwardInput

func (PortForwardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortForward)(nil)).Elem()
}

func (i PortForwardArray) ToPortForwardArrayOutput() PortForwardArrayOutput {
	return i.ToPortForwardArrayOutputWithContext(context.Background())
}

func (i PortForwardArray) ToPortForwardArrayOutputWithContext(ctx context.Context) PortForwardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortForwardArrayOutput)
}

// PortForwardMapInput is an input type that accepts PortForwardMap and PortForwardMapOutput values.
// You can construct a concrete instance of `PortForwardMapInput` via:
//
//          PortForwardMap{ "key": PortForwardArgs{...} }
type PortForwardMapInput interface {
	pulumi.Input

	ToPortForwardMapOutput() PortForwardMapOutput
	ToPortForwardMapOutputWithContext(context.Context) PortForwardMapOutput
}

type PortForwardMap map[string]PortForwardInput

func (PortForwardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortForward)(nil)).Elem()
}

func (i PortForwardMap) ToPortForwardMapOutput() PortForwardMapOutput {
	return i.ToPortForwardMapOutputWithContext(context.Background())
}

func (i PortForwardMap) ToPortForwardMapOutputWithContext(ctx context.Context) PortForwardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortForwardMapOutput)
}

type PortForwardOutput struct{ *pulumi.OutputState }

func (PortForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortForward)(nil)).Elem()
}

func (o PortForwardOutput) ToPortForwardOutput() PortForwardOutput {
	return o
}

func (o PortForwardOutput) ToPortForwardOutputWithContext(ctx context.Context) PortForwardOutput {
	return o
}

type PortForwardArrayOutput struct{ *pulumi.OutputState }

func (PortForwardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortForward)(nil)).Elem()
}

func (o PortForwardArrayOutput) ToPortForwardArrayOutput() PortForwardArrayOutput {
	return o
}

func (o PortForwardArrayOutput) ToPortForwardArrayOutputWithContext(ctx context.Context) PortForwardArrayOutput {
	return o
}

func (o PortForwardArrayOutput) Index(i pulumi.IntInput) PortForwardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortForward {
		return vs[0].([]*PortForward)[vs[1].(int)]
	}).(PortForwardOutput)
}

type PortForwardMapOutput struct{ *pulumi.OutputState }

func (PortForwardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortForward)(nil)).Elem()
}

func (o PortForwardMapOutput) ToPortForwardMapOutput() PortForwardMapOutput {
	return o
}

func (o PortForwardMapOutput) ToPortForwardMapOutputWithContext(ctx context.Context) PortForwardMapOutput {
	return o
}

func (o PortForwardMapOutput) MapIndex(k pulumi.StringInput) PortForwardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortForward {
		return vs[0].(map[string]*PortForward)[vs[1].(string)]
	}).(PortForwardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortForwardInput)(nil)).Elem(), &PortForward{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortForwardArrayInput)(nil)).Elem(), PortForwardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortForwardMapInput)(nil)).Elem(), PortForwardMap{})
	pulumi.RegisterOutputType(PortForwardOutput{})
	pulumi.RegisterOutputType(PortForwardArrayOutput{})
	pulumi.RegisterOutputType(PortForwardMapOutput{})
}
