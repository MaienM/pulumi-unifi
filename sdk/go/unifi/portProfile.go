// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PortProfile` manages a port profile for use on network switches.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// 	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		vlanId := 10
// 		if param := cfg.GetFloat("vlanId"); param != 0 {
// 			vlanId = param
// 		}
// 		vlan, err := unifi.NewNetwork(ctx, "vlan", &unifi.NetworkArgs{
// 			Purpose:     pulumi.String("corporate"),
// 			Subnet:      pulumi.String("10.0.0.1/24"),
// 			VlanId:      pulumi.Float64(vlanId),
// 			DhcpStart:   pulumi.String("10.0.0.6"),
// 			DhcpStop:    pulumi.String("10.0.0.254"),
// 			DhcpEnabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = unifi.NewPortProfile(ctx, "poeDisabled", &unifi.PortProfileArgs{
// 			NativeNetworkconfId: vlan.ID(),
// 			PoeMode:             pulumi.String("off"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PortProfile struct {
	pulumi.CustomResourceState

	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrOutput `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrOutput `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrOutput `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrOutput `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrOutput `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrOutput `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrOutput `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrOutput `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrOutput `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrOutput `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrOutput `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrOutput `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrOutput `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrOutput `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayOutput `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrOutput `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrOutput `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrOutput `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrOutput `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site pulumi.StringOutput `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrOutput `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrOutput `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrOutput `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrOutput `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrOutput `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrOutput `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayOutput `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrOutput `pulumi:"voiceNetworkconfId"`
}

// NewPortProfile registers a new resource with the given unique name, arguments, and options.
func NewPortProfile(ctx *pulumi.Context,
	name string, args *PortProfileArgs, opts ...pulumi.ResourceOption) (*PortProfile, error) {
	if args == nil {
		args = &PortProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource PortProfile
	err := ctx.RegisterResource("unifi:index/portProfile:PortProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortProfile gets an existing PortProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortProfileState, opts ...pulumi.ResourceOption) (*PortProfile, error) {
	var resource PortProfile
	err := ctx.ReadResource("unifi:index/portProfile:PortProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortProfile resources.
type portProfileState struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg *bool `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl *string `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout *int `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps *int `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled *bool `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward *string `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex *bool `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation *bool `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled *bool `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled *bool `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name *string `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId *string `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode *string `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode *string `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses []string `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level *int `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level *int `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level *int `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level *int `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site *string `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed *int `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled *bool `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel *int `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate *int `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled *bool `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel *int `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate *int `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType *string `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled *bool `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel *int `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate *int `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode *bool `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds []string `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId *string `pulumi:"voiceNetworkconfId"`
}

type PortProfileState struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrInput
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrInput
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrInput
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrInput
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrInput
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrInput
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrInput
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrInput
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrInput
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrInput
	// The name of the port profile.
	Name pulumi.StringPtrInput
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrInput
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrInput
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrInput
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrInput
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayInput
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrInput
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrInput
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrInput
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrInput
	// The name of the site to associate the port profile with.
	Site pulumi.StringPtrInput
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrInput
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrInput
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrInput
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrInput
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrInput
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrInput
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrInput
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrInput
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrInput
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrInput
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrInput
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrInput
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayInput
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrInput
}

func (PortProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*portProfileState)(nil)).Elem()
}

type portProfileArgs struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg *bool `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl *string `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout *int `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps *int `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled *bool `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward *string `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex *bool `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation *bool `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled *bool `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled *bool `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name *string `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId *string `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode *string `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode *string `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses []string `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level *int `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level *int `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level *int `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level *int `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site *string `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed *int `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled *bool `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel *int `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate *int `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled *bool `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel *int `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate *int `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType *string `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled *bool `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel *int `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate *int `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode *bool `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds []string `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId *string `pulumi:"voiceNetworkconfId"`
}

// The set of arguments for constructing a PortProfile resource.
type PortProfileArgs struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrInput
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrInput
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrInput
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrInput
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrInput
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrInput
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrInput
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrInput
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrInput
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrInput
	// The name of the port profile.
	Name pulumi.StringPtrInput
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrInput
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrInput
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrInput
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrInput
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayInput
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrInput
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrInput
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrInput
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrInput
	// The name of the site to associate the port profile with.
	Site pulumi.StringPtrInput
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrInput
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrInput
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrInput
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrInput
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrInput
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrInput
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrInput
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrInput
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrInput
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrInput
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrInput
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrInput
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayInput
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrInput
}

func (PortProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portProfileArgs)(nil)).Elem()
}

type PortProfileInput interface {
	pulumi.Input

	ToPortProfileOutput() PortProfileOutput
	ToPortProfileOutputWithContext(ctx context.Context) PortProfileOutput
}

func (*PortProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**PortProfile)(nil)).Elem()
}

func (i *PortProfile) ToPortProfileOutput() PortProfileOutput {
	return i.ToPortProfileOutputWithContext(context.Background())
}

func (i *PortProfile) ToPortProfileOutputWithContext(ctx context.Context) PortProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortProfileOutput)
}

// PortProfileArrayInput is an input type that accepts PortProfileArray and PortProfileArrayOutput values.
// You can construct a concrete instance of `PortProfileArrayInput` via:
//
//          PortProfileArray{ PortProfileArgs{...} }
type PortProfileArrayInput interface {
	pulumi.Input

	ToPortProfileArrayOutput() PortProfileArrayOutput
	ToPortProfileArrayOutputWithContext(context.Context) PortProfileArrayOutput
}

type PortProfileArray []PortProfileInput

func (PortProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortProfile)(nil)).Elem()
}

func (i PortProfileArray) ToPortProfileArrayOutput() PortProfileArrayOutput {
	return i.ToPortProfileArrayOutputWithContext(context.Background())
}

func (i PortProfileArray) ToPortProfileArrayOutputWithContext(ctx context.Context) PortProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortProfileArrayOutput)
}

// PortProfileMapInput is an input type that accepts PortProfileMap and PortProfileMapOutput values.
// You can construct a concrete instance of `PortProfileMapInput` via:
//
//          PortProfileMap{ "key": PortProfileArgs{...} }
type PortProfileMapInput interface {
	pulumi.Input

	ToPortProfileMapOutput() PortProfileMapOutput
	ToPortProfileMapOutputWithContext(context.Context) PortProfileMapOutput
}

type PortProfileMap map[string]PortProfileInput

func (PortProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortProfile)(nil)).Elem()
}

func (i PortProfileMap) ToPortProfileMapOutput() PortProfileMapOutput {
	return i.ToPortProfileMapOutputWithContext(context.Background())
}

func (i PortProfileMap) ToPortProfileMapOutputWithContext(ctx context.Context) PortProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortProfileMapOutput)
}

type PortProfileOutput struct{ *pulumi.OutputState }

func (PortProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortProfile)(nil)).Elem()
}

func (o PortProfileOutput) ToPortProfileOutput() PortProfileOutput {
	return o
}

func (o PortProfileOutput) ToPortProfileOutputWithContext(ctx context.Context) PortProfileOutput {
	return o
}

type PortProfileArrayOutput struct{ *pulumi.OutputState }

func (PortProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortProfile)(nil)).Elem()
}

func (o PortProfileArrayOutput) ToPortProfileArrayOutput() PortProfileArrayOutput {
	return o
}

func (o PortProfileArrayOutput) ToPortProfileArrayOutputWithContext(ctx context.Context) PortProfileArrayOutput {
	return o
}

func (o PortProfileArrayOutput) Index(i pulumi.IntInput) PortProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortProfile {
		return vs[0].([]*PortProfile)[vs[1].(int)]
	}).(PortProfileOutput)
}

type PortProfileMapOutput struct{ *pulumi.OutputState }

func (PortProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortProfile)(nil)).Elem()
}

func (o PortProfileMapOutput) ToPortProfileMapOutput() PortProfileMapOutput {
	return o
}

func (o PortProfileMapOutput) ToPortProfileMapOutputWithContext(ctx context.Context) PortProfileMapOutput {
	return o
}

func (o PortProfileMapOutput) MapIndex(k pulumi.StringInput) PortProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortProfile {
		return vs[0].(map[string]*PortProfile)[vs[1].(string)]
	}).(PortProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortProfileInput)(nil)).Elem(), &PortProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortProfileArrayInput)(nil)).Elem(), PortProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortProfileMapInput)(nil)).Elem(), PortProfileMap{})
	pulumi.RegisterOutputType(PortProfileOutput{})
	pulumi.RegisterOutputType(PortProfileArrayOutput{})
	pulumi.RegisterOutputType(PortProfileMapOutput{})
}
