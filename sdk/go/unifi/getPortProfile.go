// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PortProfile` data source can be used to retrieve the ID for a port profile by name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-unifi/sdk/go/unifi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := unifi.LookupPortProfile(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupPortProfile(ctx *pulumi.Context, args *LookupPortProfileArgs, opts ...pulumi.InvokeOption) (*LookupPortProfileResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupPortProfileResult
	err := ctx.Invoke("unifi:index/getPortProfile:getPortProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPortProfile.
type LookupPortProfileArgs struct {
	// The name of the port profile to look up. Defaults to `All`.
	Name *string `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site *string `pulumi:"site"`
}

// A collection of values returned by getPortProfile.
type LookupPortProfileResult struct {
	// The ID of this port profile.
	Id string `pulumi:"id"`
	// The name of the port profile to look up. Defaults to `All`.
	Name *string `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site string `pulumi:"site"`
}

func LookupPortProfileOutput(ctx *pulumi.Context, args LookupPortProfileOutputArgs, opts ...pulumi.InvokeOption) LookupPortProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPortProfileResult, error) {
			args := v.(LookupPortProfileArgs)
			r, err := LookupPortProfile(ctx, &args, opts...)
			var s LookupPortProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPortProfileResultOutput)
}

// A collection of arguments for invoking getPortProfile.
type LookupPortProfileOutputArgs struct {
	// The name of the port profile to look up. Defaults to `All`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site pulumi.StringPtrInput `pulumi:"site"`
}

func (LookupPortProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortProfileArgs)(nil)).Elem()
}

// A collection of values returned by getPortProfile.
type LookupPortProfileResultOutput struct{ *pulumi.OutputState }

func (LookupPortProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortProfileResult)(nil)).Elem()
}

func (o LookupPortProfileResultOutput) ToLookupPortProfileResultOutput() LookupPortProfileResultOutput {
	return o
}

func (o LookupPortProfileResultOutput) ToLookupPortProfileResultOutputWithContext(ctx context.Context) LookupPortProfileResultOutput {
	return o
}

// The ID of this port profile.
func (o LookupPortProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the port profile to look up. Defaults to `All`.
func (o LookupPortProfileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPortProfileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the site the port profile is associated with.
func (o LookupPortProfileResultOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortProfileResult) string { return v.Site }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPortProfileResultOutput{})
}
