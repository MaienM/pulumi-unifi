// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `SettingUSG` manages settings for a Unifi Security Gateway.
type SettingUSG struct {
	pulumi.CustomResourceState

	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayOutput `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolOutput `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolOutput `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolOutput `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolOutput `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site pulumi.StringOutput `pulumi:"site"`
}

// NewSettingUSG registers a new resource with the given unique name, arguments, and options.
func NewSettingUSG(ctx *pulumi.Context,
	name string, args *SettingUSGArgs, opts ...pulumi.ResourceOption) (*SettingUSG, error) {
	if args == nil {
		args = &SettingUSGArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SettingUSG
	err := ctx.RegisterResource("unifi:index/settingUSG:SettingUSG", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingUSG gets an existing SettingUSG resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingUSG(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingUSGState, opts ...pulumi.ResourceOption) (*SettingUSG, error) {
	var resource SettingUSG
	err := ctx.ReadResource("unifi:index/settingUSG:SettingUSG", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingUSG resources.
type settingUSGState struct {
	// The DHCP relay servers.
	DhcpRelayServers []string `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog *bool `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog *bool `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog *bool `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled *bool `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site *string `pulumi:"site"`
}

type SettingUSGState struct {
	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayInput
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolPtrInput
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolPtrInput
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolPtrInput
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolPtrInput
	// The name of the site to associate the settings with.
	Site pulumi.StringPtrInput
}

func (SettingUSGState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingUSGState)(nil)).Elem()
}

type settingUSGArgs struct {
	// The DHCP relay servers.
	DhcpRelayServers []string `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog *bool `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog *bool `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog *bool `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled *bool `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site *string `pulumi:"site"`
}

// The set of arguments for constructing a SettingUSG resource.
type SettingUSGArgs struct {
	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayInput
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolPtrInput
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolPtrInput
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolPtrInput
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolPtrInput
	// The name of the site to associate the settings with.
	Site pulumi.StringPtrInput
}

func (SettingUSGArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingUSGArgs)(nil)).Elem()
}

type SettingUSGInput interface {
	pulumi.Input

	ToSettingUSGOutput() SettingUSGOutput
	ToSettingUSGOutputWithContext(ctx context.Context) SettingUSGOutput
}

func (*SettingUSG) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingUSG)(nil)).Elem()
}

func (i *SettingUSG) ToSettingUSGOutput() SettingUSGOutput {
	return i.ToSettingUSGOutputWithContext(context.Background())
}

func (i *SettingUSG) ToSettingUSGOutputWithContext(ctx context.Context) SettingUSGOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUSGOutput)
}

// SettingUSGArrayInput is an input type that accepts SettingUSGArray and SettingUSGArrayOutput values.
// You can construct a concrete instance of `SettingUSGArrayInput` via:
//
//          SettingUSGArray{ SettingUSGArgs{...} }
type SettingUSGArrayInput interface {
	pulumi.Input

	ToSettingUSGArrayOutput() SettingUSGArrayOutput
	ToSettingUSGArrayOutputWithContext(context.Context) SettingUSGArrayOutput
}

type SettingUSGArray []SettingUSGInput

func (SettingUSGArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingUSG)(nil)).Elem()
}

func (i SettingUSGArray) ToSettingUSGArrayOutput() SettingUSGArrayOutput {
	return i.ToSettingUSGArrayOutputWithContext(context.Background())
}

func (i SettingUSGArray) ToSettingUSGArrayOutputWithContext(ctx context.Context) SettingUSGArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUSGArrayOutput)
}

// SettingUSGMapInput is an input type that accepts SettingUSGMap and SettingUSGMapOutput values.
// You can construct a concrete instance of `SettingUSGMapInput` via:
//
//          SettingUSGMap{ "key": SettingUSGArgs{...} }
type SettingUSGMapInput interface {
	pulumi.Input

	ToSettingUSGMapOutput() SettingUSGMapOutput
	ToSettingUSGMapOutputWithContext(context.Context) SettingUSGMapOutput
}

type SettingUSGMap map[string]SettingUSGInput

func (SettingUSGMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingUSG)(nil)).Elem()
}

func (i SettingUSGMap) ToSettingUSGMapOutput() SettingUSGMapOutput {
	return i.ToSettingUSGMapOutputWithContext(context.Background())
}

func (i SettingUSGMap) ToSettingUSGMapOutputWithContext(ctx context.Context) SettingUSGMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUSGMapOutput)
}

type SettingUSGOutput struct{ *pulumi.OutputState }

func (SettingUSGOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingUSG)(nil)).Elem()
}

func (o SettingUSGOutput) ToSettingUSGOutput() SettingUSGOutput {
	return o
}

func (o SettingUSGOutput) ToSettingUSGOutputWithContext(ctx context.Context) SettingUSGOutput {
	return o
}

// The DHCP relay servers.
func (o SettingUSGOutput) DhcpRelayServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.StringArrayOutput { return v.DhcpRelayServers }).(pulumi.StringArrayOutput)
}

// Whether the guest firewall log is enabled.
func (o SettingUSGOutput) FirewallGuestDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.BoolOutput { return v.FirewallGuestDefaultLog }).(pulumi.BoolOutput)
}

// Whether the LAN firewall log is enabled.
func (o SettingUSGOutput) FirewallLanDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.BoolOutput { return v.FirewallLanDefaultLog }).(pulumi.BoolOutput)
}

// Whether the WAN firewall log is enabled.
func (o SettingUSGOutput) FirewallWanDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.BoolOutput { return v.FirewallWanDefaultLog }).(pulumi.BoolOutput)
}

// Whether multicast DNS is enabled.
func (o SettingUSGOutput) MulticastDnsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.BoolOutput { return v.MulticastDnsEnabled }).(pulumi.BoolOutput)
}

// The name of the site to associate the settings with.
func (o SettingUSGOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingUSG) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

type SettingUSGArrayOutput struct{ *pulumi.OutputState }

func (SettingUSGArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingUSG)(nil)).Elem()
}

func (o SettingUSGArrayOutput) ToSettingUSGArrayOutput() SettingUSGArrayOutput {
	return o
}

func (o SettingUSGArrayOutput) ToSettingUSGArrayOutputWithContext(ctx context.Context) SettingUSGArrayOutput {
	return o
}

func (o SettingUSGArrayOutput) Index(i pulumi.IntInput) SettingUSGOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingUSG {
		return vs[0].([]*SettingUSG)[vs[1].(int)]
	}).(SettingUSGOutput)
}

type SettingUSGMapOutput struct{ *pulumi.OutputState }

func (SettingUSGMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingUSG)(nil)).Elem()
}

func (o SettingUSGMapOutput) ToSettingUSGMapOutput() SettingUSGMapOutput {
	return o
}

func (o SettingUSGMapOutput) ToSettingUSGMapOutputWithContext(ctx context.Context) SettingUSGMapOutput {
	return o
}

func (o SettingUSGMapOutput) MapIndex(k pulumi.StringInput) SettingUSGOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingUSG {
		return vs[0].(map[string]*SettingUSG)[vs[1].(string)]
	}).(SettingUSGOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUSGInput)(nil)).Elem(), &SettingUSG{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUSGArrayInput)(nil)).Elem(), SettingUSGArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUSGMapInput)(nil)).Elem(), SettingUSGMap{})
	pulumi.RegisterOutputType(SettingUSGOutput{})
	pulumi.RegisterOutputType(SettingUSGArrayOutput{})
	pulumi.RegisterOutputType(SettingUSGMapOutput{})
}
